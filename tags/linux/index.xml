<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on ARAIR</title><link>https://arair.net/tags/linux/</link><description>Recent content in linux on ARAIR</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 30 Jun 2021 20:06:23 +0800</lastBuildDate><atom:link href="https://arair.net/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>linux c--文件IO</title><link>https://arair.net/p/language/c/linux/b1c11950/</link><pubDate>Wed, 30 Jun 2021 20:06:23 +0800</pubDate><guid>https://arair.net/p/language/c/linux/b1c11950/</guid><description>&lt;p>系统通过文件描述符(file descriptor：一个非负的整型值)将各种IO类型统一起来。这些IO类型包括普通文件，终端，管道，FIFO，设备，套接字等等。有了文件描述符，就可以使用一套统一的IO函数：open/read/write/close等。&lt;/p></description></item><item><title>pppd - 点对点协议守护进程</title><link>https://arair.net/p/linux/command/419f1af7/</link><pubDate>Wed, 09 Jun 2021 10:27:14 +0800</pubDate><guid>https://arair.net/p/linux/command/419f1af7/</guid><description>&lt;p>pppd - 点对点协议守护进程&lt;/p></description></item><item><title>linux c syslog函数</title><link>https://arair.net/p/language/c/linux/a74307cb/</link><pubDate>Thu, 03 Jun 2021 21:31:26 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a74307cb/</guid><description>&lt;p>openlog， syslog， closelog是一套系统日志写入接口。&lt;/p></description></item><item><title>Gnome</title><link>https://arair.net/p/linux/ba731a8d/</link><pubDate>Fri, 28 May 2021 09:06:10 +0800</pubDate><guid>https://arair.net/p/linux/ba731a8d/</guid><description>&lt;p>gnome 使用记录&lt;/p></description></item><item><title>linux c string相关函数</title><link>https://arair.net/p/language/c/linux/95495d86/</link><pubDate>Thu, 29 Apr 2021 11:24:36 +0800</pubDate><guid>https://arair.net/p/language/c/linux/95495d86/</guid><description>&lt;p>string 函数&lt;/p></description></item><item><title>ioctl 通过接口获取ip netmask</title><link>https://arair.net/p/language/c/linux/8ffe602a/</link><pubDate>Fri, 26 Mar 2021 16:09:57 +0800</pubDate><guid>https://arair.net/p/language/c/linux/8ffe602a/</guid><description>&lt;p>ioctl 通过接口获取ip netmask&lt;/p></description></item><item><title>linux排序工具sort</title><link>https://arair.net/p/linux/command/da391aa4/</link><pubDate>Tue, 23 Mar 2021 19:37:40 +0800</pubDate><guid>https://arair.net/p/linux/command/da391aa4/</guid><description>&lt;p>Linux sort命令用于将文本文件内容加以排序。&lt;/p>
&lt;p>sort可针对文本文件的内容，以行为单位来排序。&lt;/p></description></item><item><title>linux磁盘空间查看命令du</title><link>https://arair.net/p/linux/command/1766f803/</link><pubDate>Tue, 23 Mar 2021 19:36:35 +0800</pubDate><guid>https://arair.net/p/linux/command/1766f803/</guid><description>&lt;p>显示文件或目录所占用的磁盘空间。&lt;/p></description></item><item><title>linux Get Set Time函数</title><link>https://arair.net/p/language/c/linux/f68c01ba/</link><pubDate>Mon, 22 Mar 2021 14:41:12 +0800</pubDate><guid>https://arair.net/p/language/c/linux/f68c01ba/</guid><description>&lt;p>gettimeofday与settimeofday函数说明&lt;/p></description></item><item><title>linux readelf工具使用</title><link>https://arair.net/p/linux/command/282ce5b6/</link><pubDate>Wed, 17 Mar 2021 16:50:50 +0800</pubDate><guid>https://arair.net/p/linux/command/282ce5b6/</guid><description>&lt;p>readelf命令，一般用于查看ELF格式的文件信息，常见的文件如在Linux上的可执行文件，动态库(&lt;em>.so)或者静态库(&lt;/em>.a) 等包含ELF格式的文件。以下命令的使用是基于android编译出来的so文件上面去运行。&lt;/p></description></item><item><title>网络接口流量信息获取</title><link>https://arair.net/p/linux/5e8aa652/</link><pubDate>Tue, 16 Mar 2021 19:40:07 +0800</pubDate><guid>https://arair.net/p/linux/5e8aa652/</guid><description>&lt;p>linux 记录网络接口流量信息的文件在&lt;code>/proc/net/dev&lt;/code>&lt;/p>
&lt;p>以下为c获相关信息示例&lt;/p></description></item><item><title>tmux的简单使用</title><link>https://arair.net/p/linux/command/4b1ad32f/</link><pubDate>Mon, 15 Mar 2021 09:22:41 +0800</pubDate><guid>https://arair.net/p/linux/command/4b1ad32f/</guid><description>&lt;p>Tmux 是一个终端复用器（terminal multiplexer），非常有用，属于常用的开发工具。&lt;/p></description></item><item><title>linux netstat命令</title><link>https://arair.net/p/linux/command/75c0c6cf/</link><pubDate>Sat, 13 Mar 2021 11:19:45 +0800</pubDate><guid>https://arair.net/p/linux/command/75c0c6cf/</guid><description>&lt;p>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。&lt;/p></description></item><item><title>linux c--标准IO</title><link>https://arair.net/p/language/c/linux/818d73e4/</link><pubDate>Mon, 08 Mar 2021 14:07:53 +0800</pubDate><guid>https://arair.net/p/language/c/linux/818d73e4/</guid><description>&lt;p>标准I/O是ANSI C建立的一个标准I/O模型，是一个标准函数包和stdio.h头文件中的定义，具有一定的可移植性。标准I/O库处理很多细节。例如缓存分配，以优化长度执行I/O等。标准的I/O提供了三种类型的缓存。&lt;/p>
&lt;ol>
&lt;li>全缓存：当填满标准I/O缓存后才进行实际的I/O操作。&lt;/li>
&lt;li>行缓存：当输入或输出中遇到新行符时，标准I/O库执行I/O操作。&lt;/li>
&lt;li>不带缓存：stderr就是了。&lt;/li>
&lt;/ol></description></item><item><title>linux进程间通信--信号</title><link>https://arair.net/p/language/c/linux/4a8dc548/</link><pubDate>Mon, 08 Mar 2021 10:41:17 +0800</pubDate><guid>https://arair.net/p/language/c/linux/4a8dc548/</guid><description>&lt;p>概念：&lt;/p>
&lt;ol>
&lt;li>信号是在软件层次上对中断机制的一种模拟，是一种异步通信方式&lt;/li>
&lt;li>信号可以直接进行用户空间进程和内核进程之间的交互，内核进程也可以利用它来通知用户空间进程发生了哪些系统事件。&lt;/li>
&lt;li>如果该进程当前并未处于执行态，则该信号就由内核保存起来，直到该进程恢复执行再传递给它；如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被 取消时才被传递给进程。&lt;/li>
&lt;/ol>
&lt;p>用户进程对信号的响应方式：&lt;/p>
&lt;ol>
&lt;li>忽略信号：对信号不做任何处理，但是有两个信号不能忽略：即SIGKILL及SIGSTOP。&lt;/li>
&lt;li>捕捉信号：定义信号处理函数，当信号发生时，执行相应的处理函数。&lt;/li>
&lt;li>执行缺省操作：Linux对每种信号都规定了默认操作&lt;/li>
&lt;/ol></description></item><item><title>linux c--alarm函数</title><link>https://arair.net/p/language/c/linux/a00bff40/</link><pubDate>Mon, 08 Mar 2021 09:26:10 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a00bff40/</guid><description>&lt;p>设置固定时间发送&lt;code>SIGALRM&lt;/code>信号。&lt;/p></description></item><item><title>linux c动态库</title><link>https://arair.net/p/language/c/linux/9eb21010/</link><pubDate>Sun, 07 Mar 2021 21:14:22 +0800</pubDate><guid>https://arair.net/p/language/c/linux/9eb21010/</guid><description>&lt;p>Linux下动态库文件的文件名形如 libxxx.so，其中so是 Shared Object 的缩写，即可以共享的目标文件。&lt;/p>
&lt;p>在链接动态库生成可执行文件时，并不会把动态库的代码复制到执行文件中，而是在执行文件中记录对动态库的引用。&lt;/p>
&lt;p>程序执行时，再去加载动态库文件。如果动态库已经加载，则不必重复加载，从而能节省内存空间。&lt;/p></description></item><item><title>linux nm命令</title><link>https://arair.net/p/linux/command/1732f6e2/</link><pubDate>Sat, 06 Mar 2021 19:00:43 +0800</pubDate><guid>https://arair.net/p/linux/command/1732f6e2/</guid><description>&lt;p>nm是用来列出动态库静态库等文件中的符号信息&lt;/p></description></item><item><title>linux ldd命令</title><link>https://arair.net/p/linux/command/86872746/</link><pubDate>Sat, 06 Mar 2021 18:57:00 +0800</pubDate><guid>https://arair.net/p/linux/command/86872746/</guid><description>&lt;p>查看linux的可执行文件动态库信息的一个命令&lt;/p></description></item><item><title>linux objdump命令</title><link>https://arair.net/p/linux/command/840e9ae2/</link><pubDate>Sat, 06 Mar 2021 18:52:48 +0800</pubDate><guid>https://arair.net/p/linux/command/840e9ae2/</guid><description>&lt;p>objdump命令是Linux下的反汇编目标文件或者可执行文件的命令，它以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。&lt;/p></description></item><item><title>linux进程间通信--共享内存</title><link>https://arair.net/p/language/c/linux/052f29b2/</link><pubDate>Sat, 06 Mar 2021 10:41:30 +0800</pubDate><guid>https://arair.net/p/language/c/linux/052f29b2/</guid><description>&lt;h2 id="共享内存">共享内存&lt;/h2>
&lt;p>共享内存是System V版本的最后一个进程间通信方式。共享内存，顾名思义就是允许两个不相关的进程访问同一个逻辑内存，共享内存是两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常为同一段物理内存。进程可以将同一段物理内存连接到他们自己的地址空间中，所有的进程都可以访问共享内存中的地址。如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。&lt;/p></description></item><item><title>linux进程间通信--套接字</title><link>https://arair.net/p/language/c/linux/e44ccd55/</link><pubDate>Sun, 28 Feb 2021 10:41:34 +0800</pubDate><guid>https://arair.net/p/language/c/linux/e44ccd55/</guid><description>&lt;p>套接字（Socket）用于协调不同计算机上的进程间通信，也就是基于网络的通信。当然，也可以在本机上使用套接字进行进程间的通信。&lt;/p>
&lt;p>套接字通信的方式非常多，有Unix域套接字、TCP套接字、UDP套接字、链路层套接字等等。&lt;/p></description></item><item><title>linux进程间通信--管道</title><link>https://arair.net/p/language/c/linux/a38a3210/</link><pubDate>Sun, 28 Feb 2021 10:41:04 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a38a3210/</guid><description>&lt;p>管道分为有名管道和无名管道&lt;/p>
&lt;p>无名管道是一种半双工的通信方式,数据只能单向流动,而且只能在具有亲缘关系的进程间使用。进程的亲缘关系一般指的是父子关系。无明管道一般用于两个不同进程之间的通信。当一个进程创建了一个管道,并调用fork创建自己的一个子进程后,父进程关闭读管道端,子进程关闭写管道端,这样提供了两个进程之间数据流动的一种方式。&lt;/p>
&lt;p>有名管道也是一种半双工的通信方式,但是它允许无亲缘关系进程间的通信。&lt;/p></description></item><item><title>linux进程间通信</title><link>https://arair.net/p/language/c/linux/123a1a38/</link><pubDate>Sun, 28 Feb 2021 10:35:04 +0800</pubDate><guid>https://arair.net/p/language/c/linux/123a1a38/</guid><description>&lt;h2 id="进程的概念">进程的概念&lt;/h2>
&lt;p>进程是操作系统的概念，每当我们知性一个进程时，对于操作系统来讲就创建了一个进程，在这个过程中，伴随着资源的分配和释放。可以认为进程是一个程序的一次执行过程。&lt;/p>
&lt;h2 id="进程通信的概念">进程通信的概念&lt;/h2>
&lt;p>进程用户空间是相互独立的，一般而言是不可能相互访问到的。但很多情况下进程间需要互相通信，来完成系统的某项功能。进程通过与内核及其它进程之间的互相通信来协调它们的行为。&lt;/p></description></item><item><title>linux grep命令</title><link>https://arair.net/p/linux/command/767d50ae/</link><pubDate>Sat, 20 Feb 2021 14:15:49 +0800</pubDate><guid>https://arair.net/p/linux/command/767d50ae/</guid><description>&lt;p>linux grep 命令用于查找文件里符合条件的字符串。&lt;/p>
&lt;p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为&lt;code>-&lt;/code>，则 grep 指令会从标准输入设备读取数据。&lt;/p></description></item><item><title>linux内核宏</title><link>https://arair.net/p/linux/kernel/c7702ec4/</link><pubDate>Thu, 18 Feb 2021 17:18:14 +0800</pubDate><guid>https://arair.net/p/linux/kernel/c7702ec4/</guid><description>&lt;p>linux内核中有大量的宏，方便理解或有特定的用途等。&lt;/p></description></item><item><title>linux网络协议处理函数</title><link>https://arair.net/p/linux/kernel/b21c249a/</link><pubDate>Wed, 17 Feb 2021 14:08:48 +0800</pubDate><guid>https://arair.net/p/linux/kernel/b21c249a/</guid><description>&lt;p>内核版本：linux-source-4.19&lt;/p></description></item><item><title>Padavan路由器安装timeMachine</title><link>https://arair.net/p/other/703ded86/</link><pubDate>Sun, 07 Feb 2021 20:28:34 +0800</pubDate><guid>https://arair.net/p/other/703ded86/</guid><description>&lt;h1 id="准备工作">准备工作&lt;/h1>
&lt;p>刷了padavan软件的路由器一台&lt;/p>
&lt;p>移动硬盘或u盘&lt;/p>
&lt;p>移动硬盘格式化为ext4文件格式&lt;/p>
&lt;p>挂载移动硬盘到路由器&lt;/p>
&lt;p>安装opkg命令和其它设置&lt;/p>
&lt;p>​ ssh进入后台执行&lt;code>opkg.sh&lt;/code>命令，等待执行完成&lt;/p>
&lt;p>​ 修改用户名admin为root&lt;/p></description></item><item><title>iptables的使用</title><link>https://arair.net/p/linux/command/a2989e85/</link><pubDate>Sun, 07 Feb 2021 20:21:10 +0800</pubDate><guid>https://arair.net/p/linux/command/a2989e85/</guid><description>iptables 流向图 graph LR NETWORK --&amp;gt; prerouting(RPEROUTING) prerouting --raw mangle nat--&amp;gt; route(route) route --&amp;gt; input(INPUT) input --mangle filter--&amp;gt; local(local process) local --&amp;gt; output(OUTPUT) output --raw mangle nat filter--&amp;gt; postrouting(POSTROUTING) route --&amp;gt; forward(forward) forward --mangle filter--&amp;gt; postrouting postrouting --mangle nat--&amp;gt; NETWORK2(NETWORK) netfilter hooks +-----------&amp;gt; local +-----------+ | process | | | | | | | | v MANGLE +-------------+--------+ FILTER | | +----------------------+ RAW SECURITY | input | |</description></item><item><title>利用random与urandom生成随机数</title><link>https://arair.net/p/language/c/linux/cad5c2bd/</link><pubDate>Sun, 07 Feb 2021 20:18:22 +0800</pubDate><guid>https://arair.net/p/language/c/linux/cad5c2bd/</guid><description>&lt;ol>
&lt;li>介绍&lt;br>
&lt;code>/dev/random&lt;/code>和&lt;code>/dev/urandom&lt;/code>是Linux系统中提供的随机伪设备，这两个设备的任务，是提供永不为空的随机字节数据流。很多解密程序与安全应用程序（如SSH Keys,SSL Keys等）需要它们提供的随机数据流。&lt;/li>
&lt;li>区别&lt;br>
这两个设备的差异在于：&lt;code>/dev/random&lt;/code>的random依赖于系统中断，因此在系统的中断数不足时，&lt;code>/dev/random&lt;/code>设备会一直封锁，尝试读取的进程就会进入等待状态，直到系统的中断数充分够用, &lt;code>/dev/random&lt;/code>设备可以保证数据的随机性。&lt;br>
&lt;code>/dev/urandom&lt;/code>不依赖系统的中断，也就不会造成进程忙等待，但是数据的随机性也不高。&lt;/li>
&lt;li>使用方式&lt;br>
字符设备文件的打开方式和其它文件一样，都是使用open函数打开设备，然后从文件描述符中获取数据即可。&lt;/li>
&lt;/ol></description></item><item><title>awk命令</title><link>https://arair.net/p/linux/command/39baeb81/</link><pubDate>Sun, 07 Feb 2021 20:04:33 +0800</pubDate><guid>https://arair.net/p/linux/command/39baeb81/</guid><description>&lt;p>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入（stdin）、一个或多个文件，或其它命令的输出。它支持用户自定义函数和动态正则表达式等先进功能，是linux/unix下的一个强大编程工具。它在命令行中使用，但更多是作为脚本来使用。awk有很多内建的功能，比如数组、函数等，这是它和C语言的共同之处，灵活性是awk最大的优势。&lt;/p></description></item><item><title>linux c常用结构体</title><link>https://arair.net/p/language/c/linux/d6fe710c/</link><pubDate>Thu, 04 Feb 2021 10:03:37 +0800</pubDate><guid>https://arair.net/p/language/c/linux/d6fe710c/</guid><description>&lt;p>常用结构体&lt;/p></description></item><item><title>linux进程间通信--套接字 tcp</title><link>https://arair.net/p/language/c/linux/df98c918/</link><pubDate>Thu, 04 Feb 2021 10:00:53 +0800</pubDate><guid>https://arair.net/p/language/c/linux/df98c918/</guid><description>&lt;p>linux下tcp函数实现示例&lt;/p>
&lt;p>包含ipv4与ipv6&lt;/p></description></item><item><title>Linux命令记录</title><link>https://arair.net/p/linux/command/f7ac531c/</link><pubDate>Thu, 04 Feb 2021 09:58:12 +0800</pubDate><guid>https://arair.net/p/linux/command/f7ac531c/</guid><description>&lt;h1 id="grep">grep&lt;/h1>
&lt;p>Linux 命令大全 Linux 命令大全&lt;/p></description></item><item><title>Linux平台C语言记录</title><link>https://arair.net/p/language/c/6fa4517a/</link><pubDate>Thu, 04 Feb 2021 09:54:58 +0800</pubDate><guid>https://arair.net/p/language/c/6fa4517a/</guid><description>&lt;p>用于记录linux平台下c语言的学习记录&lt;/p></description></item><item><title>内核锁相关函数</title><link>https://arair.net/p/linux/kernel/f34ed81a/</link><pubDate>Mon, 01 Feb 2021 21:47:48 +0800</pubDate><guid>https://arair.net/p/linux/kernel/f34ed81a/</guid><description>互斥锁 mutex_init(struct mutex *lock); mutex_lock(struct mutex *lock); mutex_unlock(struct mutex *lock); 自旋锁 spin_lock(spinlock_t *lock); spin_unlock(spinlock_t *lock);</description></item><item><title>qemu运行编译的linux内核</title><link>https://arair.net/p/linux/kernel/f947eaf8/</link><pubDate>Mon, 01 Feb 2021 21:44:31 +0800</pubDate><guid>https://arair.net/p/linux/kernel/f947eaf8/</guid><description>&lt;p>使用qemu模拟arm环境运行编译好的内核&lt;/p></description></item><item><title>linux watch命令</title><link>https://arair.net/p/linux/command/d430e865/</link><pubDate>Sun, 31 Jan 2021 19:34:24 +0800</pubDate><guid>https://arair.net/p/linux/command/d430e865/</guid><description>&lt;p>watch可以帮你监测一个命令的运行结果，来监测你想要的一切命令的结果变化&lt;/p></description></item><item><title>ping命令</title><link>https://arair.net/p/tool/4d462862/</link><pubDate>Mon, 25 Jan 2021 14:58:01 +0800</pubDate><guid>https://arair.net/p/tool/4d462862/</guid><description>当前使用linux下ping为例 -I 指定接口 -i interval 发送数据包之间等待的间隔(单位秒)。默认设置是等待一秒 -c count 发送count次ECHO_REQUE</description></item><item><title>cron服务使用</title><link>https://arair.net/p/linux/command/3ce8a8fe/</link><pubDate>Sun, 24 Jan 2021 11:50:41 +0800</pubDate><guid>https://arair.net/p/linux/command/3ce8a8fe/</guid><description>&lt;p>cron服务是一个定时执行的服务，守护进程为&lt;code>crond&lt;/code>可以通过crontab 命令添加或者编辑需要定时执行的任务：&lt;/p>
&lt;ul>
&lt;li>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数&lt;/li>
&lt;li>crontab -l //列出某个用户cron服务的详细内容&lt;/li>
&lt;li>crontab -r //删除某个用户的cron服务&lt;/li>
&lt;li>crontab -e //编辑某个用户的cron服务&lt;/li>
&lt;/ul></description></item><item><title>网络子系统初始化</title><link>https://arair.net/p/linux/kernel/2b2cc5f7/</link><pubDate>Sun, 24 Jan 2021 11:24:01 +0800</pubDate><guid>https://arair.net/p/linux/kernel/2b2cc5f7/</guid><description>&lt;h1 id="网络设备初始化">网络设备初始化&lt;/h1>
&lt;p>内核初始化代码(init/main.c &amp;ndash;&amp;gt; asmlinkage __visible void __init start_kernel(void))&lt;/p>
&lt;blockquote>
&lt;p>ps：这里只介绍网络子系统的初始化流程。&lt;/p>
&lt;/blockquote>
&lt;p>系统启动时会执行start_kernel对内核的各个子系统进行初始化。start_kernel会进行必要的初始化任务，比如init_IRQ和softirq_init进行硬中断和软中断初始化,在rest_init中会调用内核线程函数创建一个线程执行kernel_init继续进行其它初始化，start_kernel函数将会继续执行下去并退出。在kernel_init函数中的执行关系kernel_init_freeable()&amp;ndash;&amp;gt;do_basic_setup()&amp;ndash;&amp;gt;do_initcalls()，在do_initcalls函数中，会对调用各个子系统的初始化函数，类似subsys_initcall(net_dev_init)函数。其中net_dev_init&lt;code>net/core/dev.c&lt;/code>为网络设备的初始化函数&lt;/p>
&lt;p>内核子系统和编译到内核的驱动都是通过do_initcalls进行初始化的&lt;/p></description></item></channel></rss>