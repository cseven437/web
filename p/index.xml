<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ps on ARAIR</title><link>https://arair.net/p/</link><description>Recent content in Ps on ARAIR</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Sun, 24 Jul 2022 17:54:00 +0800</lastBuildDate><atom:link href="https://arair.net/p/index.xml" rel="self" type="application/rss+xml"/><item><title>vim个人配置记录</title><link>https://arair.net/p/1658656440/</link><pubDate>Sun, 24 Jul 2022 17:54:00 +0800</pubDate><guid>https://arair.net/p/1658656440/</guid><description>set nocompatible set backspace=eol,start,indent set autoindent set cindent set number &amp;#34; 高亮显示搜索内容 set hlsearch &amp;#34; 忽略大小写 set ignorecase &amp;#34; 输入时显示搜索内容 set incsearch set shiftwidth=4 set softtabstop=4 set noexpandtab set tabstop=4 set nowrap &amp;#34; 记住上次退出位置 ===================== if has(&amp;#34;autocmd&amp;#34;) au BufReadPost * if line(&amp;#34;&amp;#39;\&amp;#34;&amp;#34;) &amp;gt; 1</description></item><item><title>vim使用记录以及相关配置</title><link>https://arair.net/p/1658656500/</link><pubDate>Sun, 24 Jul 2022 17:53:00 +0800</pubDate><guid>https://arair.net/p/1658656500/</guid><description>源码编译 获取代码并编译 1 2 3 4 5 git clone https://github.com/vim/vim.git cd vim/src ./configure --prefix=~/opt/usr/local/ make make install 修改PATH ~/.bashrc export PATH=~/usr/local/bin:$PATH 使用方法记录 有注释时粘贴代码自动换行导致错乱问题 粘贴代码时对齐问题 set paste</description></item><item><title>vim-leader插件</title><link>https://arair.net/p/1658656320/</link><pubDate>Sun, 24 Jul 2022 17:52:00 +0800</pubDate><guid>https://arair.net/p/1658656320/</guid><description>LeaderF 介绍 LeaderF 是一个问世很长时间的 Vim 插件了，可是我直到最近才发现它，大有相见恨晚之感。它的基本功能是提供了文件、buffers、mrus（most</description></item><item><title>C关键字 register说明</title><link>https://arair.net/p/1658324570/</link><pubDate>Wed, 20 Jul 2022 21:42:50 +0800</pubDate><guid>https://arair.net/p/1658324570/</guid><description>用register声明的变量是寄存器变量，是存放在CPU的寄存器里的。而我们平时声明的变量是存放在内存中的。虽说内存的速度已经很快了，不过跟</description></item><item><title>cmake的使用</title><link>https://arair.net/p/1658322000/</link><pubDate>Wed, 20 Jul 2022 21:00:00 +0800</pubDate><guid>https://arair.net/p/1658322000/</guid><description>简介 CMake是一套类似于automake的跨平台辅助项目编译的工具 工作流程: CMake处理顶级目录的CMakeLists.txt(CMak</description></item><item><title>python-执行系统命令</title><link>https://arair.net/p/1658235600/</link><pubDate>Tue, 19 Jul 2022 21:00:00 +0800</pubDate><guid>https://arair.net/p/1658235600/</guid><description>os.system方法 这个方法是直接调用标准C的system()函数，仅仅在一个子终端运行系统命令，而不能获取执行后的返回信息。 os.sys</description></item><item><title>linux 修改mtu</title><link>https://arair.net/p/c6e6bd0114cf4ad1be8563856c93b1cb/</link><pubDate>Sun, 19 Dec 2021 09:13:23 +0800</pubDate><guid>https://arair.net/p/c6e6bd0114cf4ad1be8563856c93b1cb/</guid><description>查看网卡mtu值，写入时也用这个，也可以通过ifconfig命令查看 cat /sys/class/net/eth0.2/mtu 1400</description></item><item><title>正则表达式</title><link>https://arair.net/p/075f1d706ede4920bb6bf09039fc59c9/</link><pubDate>Sun, 31 Oct 2021 10:50:58 +0800</pubDate><guid>https://arair.net/p/075f1d706ede4920bb6bf09039fc59c9/</guid><description>特别字符 描述 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹</description></item><item><title>gcc 交叉编译环境问题</title><link>https://arair.net/p/2a3a146722774670a571cbf524617350/</link><pubDate>Sun, 31 Oct 2021 10:49:45 +0800</pubDate><guid>https://arair.net/p/2a3a146722774670a571cbf524617350/</guid><description>报错信息 ld: error: cannot open crt1.o: No such file or directory ld: error: cannot open crti.o: No such file or directory ld: error: cannot open crtbegin.o: No such file or directory ld: error: cannot open crtend.o: No such file or directory ld: error: cannot open crtn.o: No such file or directory ld: error: cannot find -lgcc ld: error: cannot find -lgcc_s ld: error: cannot find -lc ld:</description></item><item><title>linux 进程相关函数--fork vfork clone</title><link>https://arair.net/p/283d2749124e40fd99ed3c847dcac1da/</link><pubDate>Sun, 31 Oct 2021 10:47:24 +0800</pubDate><guid>https://arair.net/p/283d2749124e40fd99ed3c847dcac1da/</guid><description>fork fork创造的子进程是父进程的完整副本，复制了父亲进程的资源，包括内存的内容task_struct内容 vfork vfork创建的子进程与父进程共享</description></item><item><title>linux 命令--date</title><link>https://arair.net/p/0cb8f574693444d5818d58fdf82556be/</link><pubDate>Mon, 20 Sep 2021 15:51:36 +0800</pubDate><guid>https://arair.net/p/0cb8f574693444d5818d58fdf82556be/</guid><description>date命令的功能是显示和设置系统日期和时间。 date命令格式 该命令的一般格式为： date [选项] 显示时间格式（以+开头，后面接格式） date 命令中各选</description></item><item><title>JavaScript 获取日期方法</title><link>https://arair.net/p/1632124240/</link><pubDate>Mon, 20 Sep 2021 15:50:40 +0800</pubDate><guid>https://arair.net/p/1632124240/</guid><description>日期方法允许您获取并设置日期值（年、月、日、时、分、秒、毫秒） 日期获取方法 获取方法用于获取日期的某个部分（来自日期对象的信息）。下面是最常用</description></item><item><title>IPv4-IP地址分类</title><link>https://arair.net/p/fbf965f77e814d5fa5d7d0c1d292edfe/</link><pubDate>Mon, 20 Sep 2021 15:49:39 +0800</pubDate><guid>https://arair.net/p/fbf965f77e814d5fa5d7d0c1d292edfe/</guid><description>IP地址由四段组成，每个字段是一个字节，8位，最大值是255 IP地址由两部分组成，即网络地址和主机地址。网络地址表示其属于互联网的哪一个网络</description></item><item><title>linux进程状态信息查看</title><link>https://arair.net/p/f54c5dbc16bd4495be74c99bef30abcc/</link><pubDate>Mon, 20 Sep 2021 15:40:27 +0800</pubDate><guid>https://arair.net/p/f54c5dbc16bd4495be74c99bef30abcc/</guid><description>cat /proc/pid/status 参数 说明 VmPeak 表示进程所占用最大虚拟内存大小 VmSize 表示进程当前虚拟内存大小 VmLck 表示被锁定的内存大小 VmHWM 表示进程所占用物理内存的峰值 VmRSS 表示进程当前占用</description></item><item><title>shell--字符串截取</title><link>https://arair.net/p/b758e4734d0c499a9eb383676c351561/</link><pubDate>Sun, 12 Sep 2021 17:18:35 +0800</pubDate><guid>https://arair.net/p/b758e4734d0c499a9eb383676c351561/</guid><description>Shell 截取字符串通常有两种方式：从指定位置开始截取和从指定字符（子字符串）开始截取。 从指定位置开始截取 这种方式需要两个参数：除了指定起始位置，还</description></item><item><title>shell--运算符</title><link>https://arair.net/p/808c599475dc48ad9c17b622ab588189/</link><pubDate>Sun, 12 Sep 2021 17:17:48 +0800</pubDate><guid>https://arair.net/p/808c599475dc48ad9c17b622ab588189/</guid><description>优先级 优先级 运算符 说 明 13 -,+ 单目负、单目正 12 !,~ 逻辑非、按位取反或补码 11 *, /, % 乘、除、取模 10 +, - 加、减 9 &amp;laquo;, &amp;raquo; 按位左移、按位右移 8 &amp;lt;=, &amp;gt;=, &amp;lt;, &amp;gt; 小于或等</description></item><item><title>shell--循环语句</title><link>https://arair.net/p/06fb18b8f773474cac988f7d11008d8d/</link><pubDate>Sun, 12 Sep 2021 17:16:33 +0800</pubDate><guid>https://arair.net/p/06fb18b8f773474cac988f7d11008d8d/</guid><description>for语句 顺序输出当前列表中的数字： 1 2 3 4 for loop in 1 2 3 4 5 do echo &amp;#34;The value is: $loop&amp;#34; done 输出结果 The value is: 1 The value is: 2 The value is: 3 The value is: 4 The value is: 5 顺序输出字符串中的</description></item><item><title>shell--条件语句</title><link>https://arair.net/p/2c5321dc0f02442d9bf96ca473004764/</link><pubDate>Sun, 12 Sep 2021 17:15:44 +0800</pubDate><guid>https://arair.net/p/2c5321dc0f02442d9bf96ca473004764/</guid><description>if if表达式写法 1 2 3 4 5 6 7 8 9 if condition1 then command1 elif condition2 then command2 else commandN fi 示例 1 2 3 4 5 6 7 8 9 10 11 a=10 b=20 if [ $a = $b ]; then echo &amp;#34;a 等于 b&amp;#34; elif [ $a -gt $b ]; then echo &amp;#34;a 大于 b&amp;#34; elif [ $a</description></item><item><title>github加速</title><link>https://arair.net/p/cbab873669a9430b9f8329e9d5942a4f/</link><pubDate>Sun, 12 Sep 2021 11:36:17 +0800</pubDate><guid>https://arair.net/p/cbab873669a9430b9f8329e9d5942a4f/</guid><description>https://raw.githubusercontents.com/ 加速raw.githubusercontent.com下载 只要替换成raw.githubusercontents.com</description></item><item><title>C基础--switch语句</title><link>https://arair.net/p/7c5851f355a24066bf131e9c02fef00d/</link><pubDate>Fri, 10 Sep 2021 21:42:17 +0800</pubDate><guid>https://arair.net/p/7c5851f355a24066bf131e9c02fef00d/</guid><description>switch语句用于多分支选择， 其一般形式为： 1 2 3 4 5 6 7 switch(表达式){ case 常量表达式1: 语句1; case 常量表达式2: 语句2; … case 常量</description></item><item><title>C基本数据类型 enum枚举</title><link>https://arair.net/p/fc4cc0eeb33c44e6b948d1bc4c91fce0/</link><pubDate>Thu, 09 Sep 2021 21:42:17 +0800</pubDate><guid>https://arair.net/p/fc4cc0eeb33c44e6b948d1bc4c91fce0/</guid><description>枚举是 C 语言中的一种基本数据类型，它可以让数据更简洁，更易读。 枚举语法定义格式为： 1 enum 枚举名 {枚举元素1,枚举元素2,……}; 在C 语言中，枚</description></item><item><title>C库函数 strncasecmp</title><link>https://arair.net/p/language/c/function/b956f6c5/</link><pubDate>Sat, 24 Jul 2021 17:30:03 +0800</pubDate><guid>https://arair.net/p/language/c/function/b956f6c5/</guid><description>1 2 3 #include &amp;lt;string.h&amp;gt; int strncasecmp(const char *s1, const char *s2, size_t n); 函数说明：strncasecmp()用来比较参数s1 和s2 字符串前n个字符，比较时会自动忽略大小写的差异。 返回值</description></item><item><title>C库函数 strcpy strncpy</title><link>https://arair.net/p/language/c/function/daa8a12f/</link><pubDate>Sat, 24 Jul 2021 17:24:45 +0800</pubDate><guid>https://arair.net/p/language/c/function/daa8a12f/</guid><description>C 库函数char *strcpy(char *dest, const char *src)把 src 所指向的字符串复制到 dest。 需要注意的是如果目标数组 dest 不够大，而源字符串的长度又太长，可能会造成缓冲</description></item><item><title>C库函数-memset</title><link>https://arair.net/p/language/c/linux/b0463797/</link><pubDate>Sat, 24 Jul 2021 17:22:14 +0800</pubDate><guid>https://arair.net/p/language/c/linux/b0463797/</guid><description>C 库函数 void *memset(void *str, int c, size_t n) 复制字符 c（一个无符号字符）到参数 str 所指向的字符串的前 n 个字符。 声明 下面是 memset() 函数的声明。 1 void *memset(void *str, int c, size_t n) 参数 str &amp;ndash; 指向要</description></item><item><title>C库函数 strlen</title><link>https://arair.net/p/language/c/function/f5692fd7/</link><pubDate>Sat, 24 Jul 2021 10:51:22 +0800</pubDate><guid>https://arair.net/p/language/c/function/f5692fd7/</guid><description>strlen()函数用来计算字符串的长度，其原型为： 1 2 3 #include &amp;lt;string.h&amp;gt; unsigned int strlen (char *s); 参数 s 指定的字符串。 strlen()用来计算指定的字符串s 的长度，不</description></item><item><title>C库函数 memcpy</title><link>https://arair.net/p/language/c/linux/e0c6ff04/</link><pubDate>Sat, 24 Jul 2021 10:38:53 +0800</pubDate><guid>https://arair.net/p/language/c/linux/e0c6ff04/</guid><description>C 库函数 void *memcpy(void *str1, const void *str2, size_t n) 从存储区 str2 复制 n 个字节到存储区 str1。 声明 1 2 3 #include &amp;lt;string.h&amp;gt; void *memcpy(void *str1, const void *str2, size_t n) 参数 str1 &amp;ndash; 指向用于存储复制内容的目标数组，类型强</description></item><item><title>clock_gettime函数</title><link>https://arair.net/p/language/c/linux/dbdc72e8/</link><pubDate>Wed, 21 Jul 2021 13:12:48 +0800</pubDate><guid>https://arair.net/p/language/c/linux/dbdc72e8/</guid><description>1 2 3 4 5 6 7 #include &amp;lt;time.h&amp;gt; int clock_getres(clockid_t clk_id, struct timespec *res); int clock_gettime(clockid_t clk_id, struct timespec *tp); int clock_settime(clockid_t clk_id, const struct timespec *tp); // Link with -lrt. 参数 clk_id a、CLOCK_REALTIME:系统实时时间,随系统实时时间改变而改</description></item><item><title>linux-c 格式化输出函数</title><link>https://arair.net/p/language/c/linux/c2fb0965f61f47a4b6412ce62b324548/</link><pubDate>Sat, 10 Jul 2021 17:18:13 +0800</pubDate><guid>https://arair.net/p/language/c/linux/c2fb0965f61f47a4b6412ce62b324548/</guid><description>&lt;h2 id="stdioh">stdio.h&lt;/h2>
&lt;h3 id="snprintf">snprintf&lt;/h3>
&lt;p>C 库函数 **int snprintf(char &lt;em>str, size_t size, const char &lt;em>format, &amp;hellip;)&lt;/em>&lt;/em> 设将可变参数(&amp;hellip;)按照 format 格式化成字符串，并将字符串复制到 str 中，size 为要写入的字符的最大数目，超过 size 会被截断。&lt;/p></description></item><item><title>linux-c sleep usleep函数</title><link>https://arair.net/p/language/c/linux/1bb3a166/</link><pubDate>Sat, 10 Jul 2021 17:02:50 +0800</pubDate><guid>https://arair.net/p/language/c/linux/1bb3a166/</guid><description>&lt;p>在linux编程中，有时候会用到定时功能，常见的是用sleep(time)函数来睡眠time秒；但是这个函数是可以被中断的，也就是说当进程在睡眠的过程中，如果被中断，那么当中断结束回来再执行该进程的时候，该进程会从sleep函数的下一条语句执行；这样的话就不会睡眠time秒了；&lt;/p></description></item><item><title>linux-c system函数</title><link>https://arair.net/p/language/c/linux/3656b6ee8cb04f7986a25e00ed884a96/</link><pubDate>Sat, 10 Jul 2021 16:56:52 +0800</pubDate><guid>https://arair.net/p/language/c/linux/3656b6ee8cb04f7986a25e00ed884a96/</guid><description>C 库函数 system 把command指定的命令名称或程序名称传给要被命令处理器执行的主机环境，并在命令完成后返回。 1 2 3 #include &amp;lt;stdlib.h&amp;gt; int system(const char *command) 参数 command &amp;ndash; 包含被请求</description></item><item><title>C语言标准库-atoi</title><link>https://arair.net/p/ca2b3d7e/</link><pubDate>Wed, 07 Jul 2021 22:26:07 +0800</pubDate><guid>https://arair.net/p/ca2b3d7e/</guid><description>C 库函数 int atoi(const char *str) 把参数 str 所指向的字符串转换为一个整数（类型为 int 型）。 与strtol(nptr, NULL, 10);功能相似 1 2 3 4 5 6 #include &amp;lt;stdlib.h&amp;gt; int atoi(const char *str) long atol(const</description></item><item><title>编解码工具-base64</title><link>https://arair.net/p/linux/command/41f56c63/</link><pubDate>Sun, 04 Jul 2021 18:52:44 +0800</pubDate><guid>https://arair.net/p/linux/command/41f56c63/</guid><description>&lt;p>base64是一种常用的简单的编解码方式&lt;/p></description></item><item><title>文件系统挂载命令-mount</title><link>https://arair.net/p/linux/command/32715d04/</link><pubDate>Thu, 01 Jul 2021 10:27:45 +0800</pubDate><guid>https://arair.net/p/linux/command/32715d04/</guid><description>&lt;p>Linux mount命令是经常会使用到的命令，它用于挂载Linux系统外的文件。&lt;/p></description></item><item><title>netfilter 连接跟踪的命令-conntrack</title><link>https://arair.net/p/linux/command/701d30ee/</link><pubDate>Thu, 01 Jul 2021 10:18:21 +0800</pubDate><guid>https://arair.net/p/linux/command/701d30ee/</guid><description>&lt;p>conntrack 实用程序为 Netfilter 连接跟踪系统提供了一个功能齐全的用户空间界面，旨在取代旧的 /proc/net/ip_conntrack 界面。 该工具可用于搜索、列出、检查和维护 Linux 内核的连接跟踪子系统。
使用 conntrack，您可以转储所有（或筛选出的）当前跟踪连接的列表，从状态表中删除连接，甚至添加新连接。&lt;/p>
&lt;p>此外，您还可以监控连接跟踪事件，例如 每个新建立的连接显示一个事件消息（一行）。&lt;/p></description></item><item><title>linux c--文件IO</title><link>https://arair.net/p/language/c/linux/b1c11950/</link><pubDate>Wed, 30 Jun 2021 20:06:23 +0800</pubDate><guid>https://arair.net/p/language/c/linux/b1c11950/</guid><description>&lt;p>系统通过文件描述符(file descriptor：一个非负的整型值)将各种IO类型统一起来。这些IO类型包括普通文件，终端，管道，FIFO，设备，套接字等等。有了文件描述符，就可以使用一套统一的IO函数：open/read/write/close等。&lt;/p></description></item><item><title>html dom</title><link>https://arair.net/p/web/8d5f760c/</link><pubDate>Wed, 30 Jun 2021 20:03:29 +0800</pubDate><guid>https://arair.net/p/web/8d5f760c/</guid><description>&lt;p>通过 HTML DOM，JavaScript 能够访问 HTML 文档中的每个元素。&lt;/p></description></item><item><title>使用github action发布hugo到github page</title><link>https://arair.net/p/tool/2b76d755/</link><pubDate>Fri, 25 Jun 2021 22:05:00 +0800</pubDate><guid>https://arair.net/p/tool/2b76d755/</guid><description>&lt;p>可以使用github action来进行发布hugo&lt;/p></description></item><item><title>linux c assert函数</title><link>https://arair.net/p/language/c/linux/51c8743a/</link><pubDate>Thu, 24 Jun 2021 11:37:59 +0800</pubDate><guid>https://arair.net/p/language/c/linux/51c8743a/</guid><description>&lt;p>assert()是一个调试程序时经常使用的宏，在程序运行时它计算括号内的表达式，如果表达式为FALSE (0), 程序将报告错误，并终止执行。如果表达式不为0，则继续执行后面的语句，它的作用是终止程序以免导致严重后果，同时也便于查找错误。&lt;/p></description></item><item><title>sed命令的使用</title><link>https://arair.net/p/linux/command/fcaea17b/</link><pubDate>Wed, 23 Jun 2021 15:55:59 +0800</pubDate><guid>https://arair.net/p/linux/command/fcaea17b/</guid><description>&lt;p>Linux sed 命令是利用脚本来处理文本文件。&lt;/p>
&lt;p>sed 可依照脚本的指令来处理、编辑文本文件。&lt;/p>
&lt;p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。&lt;/p></description></item><item><title>sqlite3 C相关函数</title><link>https://arair.net/p/language/c/1a131392/</link><pubDate>Wed, 16 Jun 2021 15:52:54 +0800</pubDate><guid>https://arair.net/p/language/c/1a131392/</guid><description>&lt;p>sqlite3 c相关函数&lt;/p></description></item><item><title>wsl使用记录</title><link>https://arair.net/p/8d226453/</link><pubDate>Wed, 16 Jun 2021 14:52:17 +0800</pubDate><guid>https://arair.net/p/8d226453/</guid><description>适用于 Linux 的 Windows 子系统可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。 将 WSL 2 设置为</description></item><item><title>wifi dfs</title><link>https://arair.net/p/network/wifi/285ee3cd/</link><pubDate>Mon, 14 Jun 2021 11:24:31 +0800</pubDate><guid>https://arair.net/p/network/wifi/285ee3cd/</guid><description>&lt;p>DFS（Dynamic Frequency Selection）动态频率选择&lt;/p></description></item><item><title>tcp mss的理解</title><link>https://arair.net/p/network/5ec5e23f/</link><pubDate>Sat, 12 Jun 2021 11:38:30 +0800</pubDate><guid>https://arair.net/p/network/5ec5e23f/</guid><description>&lt;p>MSS 是TCP选项中最经常出现，也是最早出现的选项。MSS选项占4byte。MSS是每一个TCP报文段中数据字段的最大长度，注意：只是数据部分的字段，不包括TCP的头部。TCP在三次握手中，每一方都会通告其期望收到的MSS（MSS只出现在SYN数据包中）。如果一方不接受另一方的MSS值则定为默认值536byte。&lt;/p></description></item><item><title>pppd - 点对点协议守护进程</title><link>https://arair.net/p/linux/command/419f1af7/</link><pubDate>Wed, 09 Jun 2021 10:27:14 +0800</pubDate><guid>https://arair.net/p/linux/command/419f1af7/</guid><description>&lt;p>pppd - 点对点协议守护进程&lt;/p></description></item><item><title>pppoe原理</title><link>https://arair.net/p/network/13209d46/</link><pubDate>Wed, 09 Jun 2021 10:03:03 +0800</pubDate><guid>https://arair.net/p/network/13209d46/</guid><description>&lt;p>PPP相比于以太网有很多的优点，我们可以让以太网拥有以太网的功能，所以PPPoE利用以太网将大量主机组成网络，通过一个远端接入设备连入因特网，并运用PPP协议对接入的每个主机进行控制，具有适用范围广、安全性高、计费方便的特点。（主要是可以方便计费管理，在以太网局域网中，我们更加常用802.1x进行认证计费，但是在运营商的网络环境中，更多应用的是PPPoE）。&lt;/p>
&lt;p>在PC和运营商的路由器之间建立PPPoE会话,每一个PC建立一个PPPoE会话。每个PC都是一个PPPoE Client，单独使用一个帐号，方便运营商对用户进行计费和控制。PC上必须安装PPPoE客户端拨号软件。&lt;/p></description></item><item><title>Docker exec命令</title><link>https://arair.net/p/tool/c1dc24fd/</link><pubDate>Tue, 08 Jun 2021 22:19:15 +0800</pubDate><guid>https://arair.net/p/tool/c1dc24fd/</guid><description>&lt;p>docker exec ：在运行的容器中执行命令&lt;/p></description></item><item><title>windows10修改wsl2的磁盘位置</title><link>https://arair.net/p/windows/2a2f95f0/</link><pubDate>Thu, 03 Jun 2021 21:51:53 +0800</pubDate><guid>https://arair.net/p/windows/2a2f95f0/</guid><description>&lt;p>wsl2默认将虚拟磁盘放到C盘，在使用中会占用C盘空间，可以将虚拟磁盘移到其它盘，这样C盘就不受影响了&lt;/p></description></item><item><title>linux c syslog函数</title><link>https://arair.net/p/language/c/linux/a74307cb/</link><pubDate>Thu, 03 Jun 2021 21:31:26 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a74307cb/</guid><description>&lt;p>openlog， syslog， closelog是一套系统日志写入接口。&lt;/p></description></item><item><title>Gnome</title><link>https://arair.net/p/linux/ba731a8d/</link><pubDate>Fri, 28 May 2021 09:06:10 +0800</pubDate><guid>https://arair.net/p/linux/ba731a8d/</guid><description>&lt;p>gnome 使用记录&lt;/p></description></item><item><title>windows 网络配置命令行工具 netsh</title><link>https://arair.net/p/windows/command/5bdfe976/</link><pubDate>Mon, 24 May 2021 10:41:30 +0800</pubDate><guid>https://arair.net/p/windows/command/5bdfe976/</guid><description>&lt;p>netsh(Network Shell) 是一个windows系统本身提供的功能强大的网络配置命令行工具&lt;/p></description></item><item><title>ffmpeg使用方法</title><link>https://arair.net/p/tool/c886b396/</link><pubDate>Fri, 21 May 2021 22:53:08 +0800</pubDate><guid>https://arair.net/p/tool/c886b396/</guid><description>&lt;p>ffmpeg 是领先的多媒体框架，能够解码、编码、转码、混合、解密、流媒体、过滤和播放人类和机器创造的几乎所有东西。它支持最晦涩的古老格式，直到最尖端的格式。无论它们是由某个标准委员会、社区还是公司设计的。它还具有高度的便携性。&lt;/p></description></item><item><title>树莓派摄像头的使用</title><link>https://arair.net/p/raspberry/297ab292/</link><pubDate>Wed, 12 May 2021 13:59:26 +0800</pubDate><guid>https://arair.net/p/raspberry/297ab292/</guid><description>&lt;p>准备一个树莓派，一个摄像头模块&lt;/p></description></item><item><title>linux c string相关函数</title><link>https://arair.net/p/language/c/linux/95495d86/</link><pubDate>Thu, 29 Apr 2021 11:24:36 +0800</pubDate><guid>https://arair.net/p/language/c/linux/95495d86/</guid><description>&lt;p>string 函数&lt;/p></description></item><item><title>ssh使用记录</title><link>https://arair.net/p/58e9487f045047d893fd28b88a434b81/</link><pubDate>Fri, 23 Apr 2021 16:55:43 +0800</pubDate><guid>https://arair.net/p/58e9487f045047d893fd28b88a434b81/</guid><description>SSH 为 Secure Shell 的缩写，由 IETF 的网络小组（Network Working Group）所制定；SSH 为建立在应用层基础上的安全协议。SSH 是较可靠，专为远程登录会话和</description></item><item><title>telnet</title><link>https://arair.net/p/linux/command/ebe9242e/</link><pubDate>Fri, 23 Apr 2021 15:45:47 +0800</pubDate><guid>https://arair.net/p/linux/command/ebe9242e/</guid><description>&lt;p>Telnet协议是TCP/IP协议族中的一员，是Internet远程登录服务的标准协议和主要方式。&lt;/p></description></item><item><title>scp命令</title><link>https://arair.net/p/linux/command/1b08611c/</link><pubDate>Mon, 12 Apr 2021 17:30:43 +0800</pubDate><guid>https://arair.net/p/linux/command/1b08611c/</guid><description>&lt;p>Linux scp 命令用于 Linux 之间复制文件和目录。&lt;/p>
&lt;p>scp 是 secure copy 的缩写, scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。&lt;/p>
&lt;p>scp 是加密的，&lt;a href="https://www.runoob.com/linux/linux-comm-rcp.html">rcp&lt;/a> 是不加密的，scp 是 rcp 的加强版。&lt;/p></description></item><item><title>inet相关函数</title><link>https://arair.net/p/language/c/linux/8233cb24/</link><pubDate>Fri, 02 Apr 2021 15:47:45 +0800</pubDate><guid>https://arair.net/p/language/c/linux/8233cb24/</guid><description>&lt;p>inet_pton - convert IPv4 and IPv6 addresses from text to binary form&lt;/p></description></item><item><title>ioctl 通过接口获取ip netmask</title><link>https://arair.net/p/language/c/linux/8ffe602a/</link><pubDate>Fri, 26 Mar 2021 16:09:57 +0800</pubDate><guid>https://arair.net/p/language/c/linux/8ffe602a/</guid><description>&lt;p>ioctl 通过接口获取ip netmask&lt;/p></description></item><item><title>linux排序工具sort</title><link>https://arair.net/p/linux/command/da391aa4/</link><pubDate>Tue, 23 Mar 2021 19:37:40 +0800</pubDate><guid>https://arair.net/p/linux/command/da391aa4/</guid><description>&lt;p>Linux sort命令用于将文本文件内容加以排序。&lt;/p>
&lt;p>sort可针对文本文件的内容，以行为单位来排序。&lt;/p></description></item><item><title>linux磁盘空间查看命令du</title><link>https://arair.net/p/linux/command/1766f803/</link><pubDate>Tue, 23 Mar 2021 19:36:35 +0800</pubDate><guid>https://arair.net/p/linux/command/1766f803/</guid><description>&lt;p>显示文件或目录所占用的磁盘空间。&lt;/p></description></item><item><title>linux Get Set Time函数</title><link>https://arair.net/p/language/c/linux/f68c01ba/</link><pubDate>Mon, 22 Mar 2021 14:41:12 +0800</pubDate><guid>https://arair.net/p/language/c/linux/f68c01ba/</guid><description>&lt;p>gettimeofday与settimeofday函数说明&lt;/p></description></item><item><title>linux readelf工具使用</title><link>https://arair.net/p/linux/command/282ce5b6/</link><pubDate>Wed, 17 Mar 2021 16:50:50 +0800</pubDate><guid>https://arair.net/p/linux/command/282ce5b6/</guid><description>&lt;p>readelf命令，一般用于查看ELF格式的文件信息，常见的文件如在Linux上的可执行文件，动态库(&lt;em>.so)或者静态库(&lt;/em>.a) 等包含ELF格式的文件。以下命令的使用是基于android编译出来的so文件上面去运行。&lt;/p></description></item><item><title>网络接口流量信息获取</title><link>https://arair.net/p/linux/5e8aa652/</link><pubDate>Tue, 16 Mar 2021 19:40:07 +0800</pubDate><guid>https://arair.net/p/linux/5e8aa652/</guid><description>&lt;p>linux 记录网络接口流量信息的文件在&lt;code>/proc/net/dev&lt;/code>&lt;/p>
&lt;p>以下为c获相关信息示例&lt;/p></description></item><item><title>tmux的简单使用</title><link>https://arair.net/p/linux/command/4b1ad32f/</link><pubDate>Mon, 15 Mar 2021 09:22:41 +0800</pubDate><guid>https://arair.net/p/linux/command/4b1ad32f/</guid><description>&lt;p>Tmux 是一个终端复用器（terminal multiplexer），非常有用，属于常用的开发工具。&lt;/p></description></item><item><title>vscode</title><link>https://arair.net/p/tool/0e9a0bb3/</link><pubDate>Sun, 14 Mar 2021 21:42:20 +0800</pubDate><guid>https://arair.net/p/tool/0e9a0bb3/</guid><description>&lt;p>记录vscode的使用方法&lt;/p></description></item><item><title>linux进程间通信-消息队列</title><link>https://arair.net/p/language/c/linux/062f28e5/</link><pubDate>Sun, 14 Mar 2021 10:41:23 +0800</pubDate><guid>https://arair.net/p/language/c/linux/062f28e5/</guid><description>&lt;h2 id="简介">简介&lt;/h2>
&lt;p>消息队列是消息的链接表 ,存放在内核中并由消息队列标识符标识。我们将称消息队列为“队列”，其标识符为“队列ID”。 &lt;code>msgget&lt;/code>用于创建一个新队列或打开一个现存的队列。 &lt;code>msgsnd&lt;/code>用于将新消息添加到队列尾端。每个消息包含一个正长整型类型字段，一个非负长度以及实际数据字节（对应于长度），所有这些都在将消息添加到队列时，传送给&lt;code>msgsnd&lt;/code>。&lt;code>msgrcv&lt;/code>用于从队列中取消息。我们并不一定要以先进先出次序取消息，也可以按消息的类型字段取消息。&lt;/p></description></item><item><title>linux进程间通信-信号量</title><link>https://arair.net/p/language/c/linux/f35cdf32/</link><pubDate>Sun, 14 Mar 2021 10:41:11 +0800</pubDate><guid>https://arair.net/p/language/c/linux/f35cdf32/</guid><description>&lt;h2 id="定义">定义&lt;/h2>
&lt;p>信号量本质上是一个计数器（不设置全局变量是因为进程间是相互独立的，而这不一定能看到，看到也不能保证&lt;code>++&lt;/code>引用计数为原子操作）,用于多进程对共享数据对象的读取，它和管道有所不同，它不以传送数据为主要目的，它主要是用来保护共享资源（信号量也属于临界资源），使得资源在一个时刻只有一个进程独享。&lt;/p></description></item><item><title>linux netstat命令</title><link>https://arair.net/p/linux/command/75c0c6cf/</link><pubDate>Sat, 13 Mar 2021 11:19:45 +0800</pubDate><guid>https://arair.net/p/linux/command/75c0c6cf/</guid><description>&lt;p>Netstat 命令用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。&lt;/p></description></item><item><title>linux c--标准IO</title><link>https://arair.net/p/language/c/linux/818d73e4/</link><pubDate>Mon, 08 Mar 2021 14:07:53 +0800</pubDate><guid>https://arair.net/p/language/c/linux/818d73e4/</guid><description>&lt;p>标准I/O是ANSI C建立的一个标准I/O模型，是一个标准函数包和stdio.h头文件中的定义，具有一定的可移植性。标准I/O库处理很多细节。例如缓存分配，以优化长度执行I/O等。标准的I/O提供了三种类型的缓存。&lt;/p>
&lt;ol>
&lt;li>全缓存：当填满标准I/O缓存后才进行实际的I/O操作。&lt;/li>
&lt;li>行缓存：当输入或输出中遇到新行符时，标准I/O库执行I/O操作。&lt;/li>
&lt;li>不带缓存：stderr就是了。&lt;/li>
&lt;/ol></description></item><item><title>linux进程间通信--信号</title><link>https://arair.net/p/language/c/linux/4a8dc548/</link><pubDate>Mon, 08 Mar 2021 10:41:17 +0800</pubDate><guid>https://arair.net/p/language/c/linux/4a8dc548/</guid><description>&lt;p>概念：&lt;/p>
&lt;ol>
&lt;li>信号是在软件层次上对中断机制的一种模拟，是一种异步通信方式&lt;/li>
&lt;li>信号可以直接进行用户空间进程和内核进程之间的交互，内核进程也可以利用它来通知用户空间进程发生了哪些系统事件。&lt;/li>
&lt;li>如果该进程当前并未处于执行态，则该信号就由内核保存起来，直到该进程恢复执行再传递给它；如果一个信号被进程设置为阻塞，则该信号的传递被延迟，直到其阻塞被 取消时才被传递给进程。&lt;/li>
&lt;/ol>
&lt;p>用户进程对信号的响应方式：&lt;/p>
&lt;ol>
&lt;li>忽略信号：对信号不做任何处理，但是有两个信号不能忽略：即SIGKILL及SIGSTOP。&lt;/li>
&lt;li>捕捉信号：定义信号处理函数，当信号发生时，执行相应的处理函数。&lt;/li>
&lt;li>执行缺省操作：Linux对每种信号都规定了默认操作&lt;/li>
&lt;/ol></description></item><item><title>linux c--alarm函数</title><link>https://arair.net/p/language/c/linux/a00bff40/</link><pubDate>Mon, 08 Mar 2021 09:26:10 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a00bff40/</guid><description>&lt;p>设置固定时间发送&lt;code>SIGALRM&lt;/code>信号。&lt;/p></description></item><item><title>linux c动态库</title><link>https://arair.net/p/language/c/linux/9eb21010/</link><pubDate>Sun, 07 Mar 2021 21:14:22 +0800</pubDate><guid>https://arair.net/p/language/c/linux/9eb21010/</guid><description>&lt;p>Linux下动态库文件的文件名形如 libxxx.so，其中so是 Shared Object 的缩写，即可以共享的目标文件。&lt;/p>
&lt;p>在链接动态库生成可执行文件时，并不会把动态库的代码复制到执行文件中，而是在执行文件中记录对动态库的引用。&lt;/p>
&lt;p>程序执行时，再去加载动态库文件。如果动态库已经加载，则不必重复加载，从而能节省内存空间。&lt;/p></description></item><item><title>linux nm命令</title><link>https://arair.net/p/linux/command/1732f6e2/</link><pubDate>Sat, 06 Mar 2021 19:00:43 +0800</pubDate><guid>https://arair.net/p/linux/command/1732f6e2/</guid><description>&lt;p>nm是用来列出动态库静态库等文件中的符号信息&lt;/p></description></item><item><title>linux ldd命令</title><link>https://arair.net/p/linux/command/86872746/</link><pubDate>Sat, 06 Mar 2021 18:57:00 +0800</pubDate><guid>https://arair.net/p/linux/command/86872746/</guid><description>&lt;p>查看linux的可执行文件动态库信息的一个命令&lt;/p></description></item><item><title>linux objdump命令</title><link>https://arair.net/p/linux/command/840e9ae2/</link><pubDate>Sat, 06 Mar 2021 18:52:48 +0800</pubDate><guid>https://arair.net/p/linux/command/840e9ae2/</guid><description>&lt;p>objdump命令是Linux下的反汇编目标文件或者可执行文件的命令，它以一种可阅读的格式让你更多地了解二进制文件可能带有的附加信息。&lt;/p></description></item><item><title>linux 线程</title><link>https://arair.net/p/language/c/linux/a02f9d22/</link><pubDate>Sat, 06 Mar 2021 11:17:46 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a02f9d22/</guid><description>&lt;p>pthread 相关函数&lt;/p></description></item><item><title>linux进程间通信--共享内存</title><link>https://arair.net/p/language/c/linux/052f29b2/</link><pubDate>Sat, 06 Mar 2021 10:41:30 +0800</pubDate><guid>https://arair.net/p/language/c/linux/052f29b2/</guid><description>&lt;h2 id="共享内存">共享内存&lt;/h2>
&lt;p>共享内存是System V版本的最后一个进程间通信方式。共享内存，顾名思义就是允许两个不相关的进程访问同一个逻辑内存，共享内存是两个正在运行的进程之间共享和传递数据的一种非常有效的方式。不同进程之间共享的内存通常为同一段物理内存。进程可以将同一段物理内存连接到他们自己的地址空间中，所有的进程都可以访问共享内存中的地址。如果某个进程向共享内存写入数据，所做的改动将立即影响到可以访问同一段共享内存的任何其他进程。&lt;/p></description></item><item><title>nc命令的使用</title><link>https://arair.net/p/linux/command/cf8e40bf/</link><pubDate>Fri, 05 Mar 2021 11:22:12 +0800</pubDate><guid>https://arair.net/p/linux/command/cf8e40bf/</guid><description>&lt;p>nc是&lt;code>netcat&lt;/code>的简写，有着网络界的瑞士军刀美誉。因为它短小精悍、功能实用，被设计为一个简单、可靠的网络工具&lt;/p>
&lt;p>&lt;strong>nc的作用&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>实现任意TCP/UDP端口的侦听，nc可以作为server以TCP或UDP方式侦听指定端口&lt;/li>
&lt;li>端口的扫描，nc可以作为client发起TCP或UDP连接&lt;/li>
&lt;li>机器之间传输文件&lt;/li>
&lt;li>机器之间网络测速&lt;/li>
&lt;/ol></description></item><item><title>getaddrinfo函数</title><link>https://arair.net/p/language/c/linux/5214af09/</link><pubDate>Mon, 01 Mar 2021 20:23:57 +0800</pubDate><guid>https://arair.net/p/language/c/linux/5214af09/</guid><description>&lt;p>getaddrinfo, freeaddrinfo, gai_strerror - network address and service translation&lt;/p></description></item><item><title>linux进程间通信--套接字</title><link>https://arair.net/p/language/c/linux/e44ccd55/</link><pubDate>Sun, 28 Feb 2021 10:41:34 +0800</pubDate><guid>https://arair.net/p/language/c/linux/e44ccd55/</guid><description>&lt;p>套接字（Socket）用于协调不同计算机上的进程间通信，也就是基于网络的通信。当然，也可以在本机上使用套接字进行进程间的通信。&lt;/p>
&lt;p>套接字通信的方式非常多，有Unix域套接字、TCP套接字、UDP套接字、链路层套接字等等。&lt;/p></description></item><item><title>linux进程间通信--管道</title><link>https://arair.net/p/language/c/linux/a38a3210/</link><pubDate>Sun, 28 Feb 2021 10:41:04 +0800</pubDate><guid>https://arair.net/p/language/c/linux/a38a3210/</guid><description>&lt;p>管道分为有名管道和无名管道&lt;/p>
&lt;p>无名管道是一种半双工的通信方式,数据只能单向流动,而且只能在具有亲缘关系的进程间使用。进程的亲缘关系一般指的是父子关系。无明管道一般用于两个不同进程之间的通信。当一个进程创建了一个管道,并调用fork创建自己的一个子进程后,父进程关闭读管道端,子进程关闭写管道端,这样提供了两个进程之间数据流动的一种方式。&lt;/p>
&lt;p>有名管道也是一种半双工的通信方式,但是它允许无亲缘关系进程间的通信。&lt;/p></description></item><item><title>linux进程间通信</title><link>https://arair.net/p/language/c/linux/123a1a38/</link><pubDate>Sun, 28 Feb 2021 10:35:04 +0800</pubDate><guid>https://arair.net/p/language/c/linux/123a1a38/</guid><description>&lt;h2 id="进程的概念">进程的概念&lt;/h2>
&lt;p>进程是操作系统的概念，每当我们知性一个进程时，对于操作系统来讲就创建了一个进程，在这个过程中，伴随着资源的分配和释放。可以认为进程是一个程序的一次执行过程。&lt;/p>
&lt;h2 id="进程通信的概念">进程通信的概念&lt;/h2>
&lt;p>进程用户空间是相互独立的，一般而言是不可能相互访问到的。但很多情况下进程间需要互相通信，来完成系统的某项功能。进程通过与内核及其它进程之间的互相通信来协调它们的行为。&lt;/p></description></item><item><title>c语言 mktime函数</title><link>https://arair.net/p/language/c/function/time/a4a70cf7/</link><pubDate>Fri, 26 Feb 2021 13:37:49 +0800</pubDate><guid>https://arair.net/p/language/c/function/time/a4a70cf7/</guid><description>&lt;p>将struct tm转为时间戳&lt;/p></description></item><item><title>c语言 strptime函数</title><link>https://arair.net/p/language/c/function/time/ac0898b1/</link><pubDate>Fri, 26 Feb 2021 13:36:26 +0800</pubDate><guid>https://arair.net/p/language/c/function/time/ac0898b1/</guid><description>&lt;p>读取将格式化时间&lt;/p></description></item><item><title>linux samba服务器安装</title><link>https://arair.net/p/linux/server/33f0131f/</link><pubDate>Thu, 25 Feb 2021 19:29:47 +0800</pubDate><guid>https://arair.net/p/linux/server/33f0131f/</guid><description>&lt;p>Samba是在Linux和UNIX系统上实现SMB协议的一个免费软件，由服务器及客户端程序构成。SMB（Server Messages Block，信息服务块）是一种在局域网上共享文件和打印机的一种通信协议，它为局域网内的不同计算机之间提供文件及打印机等资源的共享服务。SMB协议是客户机/服务器型协议，客户机通过该协议可以访问服务器上的共享文件系统、打印机及其他资源。通过设置“NetBIOS over TCP/IP”使得Samba不但能与局域网络主机分享资源，还能与全世界的电脑分享资源。&lt;/p></description></item><item><title>linux grep命令</title><link>https://arair.net/p/linux/command/767d50ae/</link><pubDate>Sat, 20 Feb 2021 14:15:49 +0800</pubDate><guid>https://arair.net/p/linux/command/767d50ae/</guid><description>&lt;p>linux grep 命令用于查找文件里符合条件的字符串。&lt;/p>
&lt;p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为&lt;code>-&lt;/code>，则 grep 指令会从标准输入设备读取数据。&lt;/p></description></item><item><title>tr069</title><link>https://arair.net/p/other/44e8b28d/</link><pubDate>Fri, 19 Feb 2021 10:35:17 +0800</pubDate><guid>https://arair.net/p/other/44e8b28d/</guid><description>&lt;p>TR069是 CPE 和 ACS之间沟通的通讯协定。CPE 可以借着这个协定完成服务开通、功能设定、档案上传下载、系统检测 等等初始化及营运管理的必须动作。&lt;/p></description></item><item><title>linux内核宏</title><link>https://arair.net/p/linux/kernel/c7702ec4/</link><pubDate>Thu, 18 Feb 2021 17:18:14 +0800</pubDate><guid>https://arair.net/p/linux/kernel/c7702ec4/</guid><description>&lt;p>linux内核中有大量的宏，方便理解或有特定的用途等。&lt;/p></description></item><item><title>linux网络协议处理函数</title><link>https://arair.net/p/linux/kernel/b21c249a/</link><pubDate>Wed, 17 Feb 2021 14:08:48 +0800</pubDate><guid>https://arair.net/p/linux/kernel/b21c249a/</guid><description>&lt;p>内核版本：linux-source-4.19&lt;/p></description></item><item><title>ip命令</title><link>https://arair.net/p/linux/command/744d2158/</link><pubDate>Mon, 15 Feb 2021 16:13:47 +0800</pubDate><guid>https://arair.net/p/linux/command/744d2158/</guid><description>&lt;p>Linux的ip命令和ifconfig类似，但前者功能更强大，并旨在取代后者。使用ip命令，只需一个命令，你就能很轻松地执行一些网络管理任务。iproute2套件里提供了许多增强功能的命令，ip命令即是其中之一。&lt;/p></description></item><item><title>putty中使用adb</title><link>https://arair.net/p/tool/2ddbec47/</link><pubDate>Tue, 09 Feb 2021 14:17:13 +0800</pubDate><guid>https://arair.net/p/tool/2ddbec47/</guid><description>&lt;p>adb-putty
下载 adbputty &lt;a href="http://github.com/sztupy/adbputty/downloads">http://github.com/sztupy/adbputty/downloads&lt;/a>&lt;/p></description></item><item><title>公网ip查询方法</title><link>https://arair.net/p/other/bc580e49/</link><pubDate>Tue, 09 Feb 2021 14:13:27 +0800</pubDate><guid>https://arair.net/p/other/bc580e49/</guid><description>&lt;p>公网ip查询&lt;/p></description></item><item><title>xml</title><link>https://arair.net/p/31314ff8e2a44a979d016613d38b6410/</link><pubDate>Tue, 09 Feb 2021 13:12:48 +0800</pubDate><guid>https://arair.net/p/31314ff8e2a44a979d016613d38b6410/</guid><description>可扩展标记语言，标准通用标记语言的子集，简称XML。是一种用于标记电子文件使其具有结构性的标记语言。 所有 XML 文档中的文本均会被解析器解析。 只有</description></item><item><title>tftp</title><link>https://arair.net/p/tool/e05e9c11/</link><pubDate>Tue, 09 Feb 2021 13:11:25 +0800</pubDate><guid>https://arair.net/p/tool/e05e9c11/</guid><description>&lt;p>TFTP（Trivial File Transfer Protocol,简单文件传输协议）是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。端口号为69。&lt;/p></description></item><item><title>svn</title><link>https://arair.net/p/tool/f3e08e47/</link><pubDate>Tue, 09 Feb 2021 13:10:15 +0800</pubDate><guid>https://arair.net/p/tool/f3e08e47/</guid><description>&lt;p>SVN是subversion的缩写，是一个开放源代码的版本控制系统，通过采用分支管理系统的高效管理，简而言之就是用于多个人共同开发同一个项目，实现共享资源，实现最终集中式的管理。&lt;/p></description></item><item><title>rust</title><link>https://arair.net/p/language/9e9f3bdb/</link><pubDate>Tue, 09 Feb 2021 12:55:53 +0800</pubDate><guid>https://arair.net/p/language/9e9f3bdb/</guid><description>&lt;p>Rust 语言是一种高效、可靠的通用高级语言。其高效不仅限于开发效率，它的执行效率也是令人称赞的，是一种少有的兼顾开发效率和执行效率的语言。&lt;/p></description></item><item><title>markdown</title><link>https://arair.net/p/other/61e3efdb/</link><pubDate>Tue, 09 Feb 2021 12:52:41 +0800</pubDate><guid>https://arair.net/p/other/61e3efdb/</guid><description>&lt;p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。&lt;/p>
&lt;p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。&lt;/p>
&lt;p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。&lt;/p>
&lt;p>Markdown 编写的文档后缀为 .md, .markdown。&lt;/p></description></item><item><title>javascript</title><link>https://arair.net/p/language/116a6053/</link><pubDate>Tue, 09 Feb 2021 12:50:56 +0800</pubDate><guid>https://arair.net/p/language/116a6053/</guid><description>&lt;p>JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。&lt;/p></description></item><item><title>gdb工具</title><link>https://arair.net/p/other/c8b6b610/</link><pubDate>Tue, 09 Feb 2021 12:07:52 +0800</pubDate><guid>https://arair.net/p/other/c8b6b610/</guid><description>&lt;p>GNU调试器（英语：GNU Debugger，缩写：GDB），是GNU软件系统中的标准调试器，此外GDB也是个具有移携性的调试器，经过移携需求的调修与重新编译，如今许多的类UNIX操作系统上都可以使用GDB，而现有GDB所能支持调试的编程语言有C、C++、Pascal以及FORTRAN。&lt;/p></description></item><item><title>diff</title><link>https://arair.net/p/tool/e2c5b5e7/</link><pubDate>Mon, 08 Feb 2021 14:27:51 +0800</pubDate><guid>https://arair.net/p/tool/e2c5b5e7/</guid><description>&lt;p>Linux diff命令用于比较文件的差异。&lt;/p>
&lt;p>diff以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则diff会比较目录中相同文件名的文件，但不会比较其中子目录。&lt;/p></description></item><item><title>fastboot</title><link>https://arair.net/p/tool/c4dea57e/</link><pubDate>Sun, 07 Feb 2021 21:41:17 +0800</pubDate><guid>https://arair.net/p/tool/c4dea57e/</guid><description>&lt;p>adb reboot bootloader 命令进入bootloader/fastboot模式，才可以使用fastboot进行烧写
adb reboot recovery　命令行进recovery模式&lt;/p></description></item><item><title>数据结构</title><link>https://arair.net/p/language/47a734e2/</link><pubDate>Sun, 07 Feb 2021 21:39:42 +0800</pubDate><guid>https://arair.net/p/language/47a734e2/</guid><description>&lt;p>线性表&lt;/p>
&lt;p>抽象数据类型定义：&lt;/p></description></item><item><title>c++</title><link>https://arair.net/p/language/5630ca66/</link><pubDate>Sun, 07 Feb 2021 21:38:29 +0800</pubDate><guid>https://arair.net/p/language/5630ca66/</guid><description>&lt;p>vector是向量类型，可以容纳许多类型的数据，因此也被称为容器&lt;/p></description></item><item><title>Sqlite</title><link>https://arair.net/p/other/4421402c/</link><pubDate>Sun, 07 Feb 2021 21:08:42 +0800</pubDate><guid>https://arair.net/p/other/4421402c/</guid><description>&lt;p>sqlite 图形化工具&lt;/p>
&lt;p>SQLite studio&lt;/p>
&lt;p>&lt;a href="https://sqlitestudio.pl/">https://sqlitestudio.pl/&lt;/a>&lt;/p></description></item><item><title>repo</title><link>https://arair.net/p/tool/a4d82160/</link><pubDate>Sun, 07 Feb 2021 21:07:49 +0800</pubDate><guid>https://arair.net/p/tool/a4d82160/</guid><description>&lt;p>repo sync 同步代码&lt;/p>
&lt;p>repo init 初始化xxx&lt;/p></description></item><item><title>Emacs</title><link>https://arair.net/p/tool/b01fa4d9/</link><pubDate>Sun, 07 Feb 2021 20:36:40 +0800</pubDate><guid>https://arair.net/p/tool/b01fa4d9/</guid><description>&lt;p>emacs&lt;/p></description></item><item><title>Docker</title><link>https://arair.net/p/tool/ad03bdc6/</link><pubDate>Sun, 07 Feb 2021 20:35:45 +0800</pubDate><guid>https://arair.net/p/tool/ad03bdc6/</guid><description>&lt;h2 id="docker-镜像加速">Docker 镜像加速&lt;/h2>
&lt;p>国内从DockerHub拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker官方和国内很多云服务商都提供了国内加速器服务，例如：&lt;/p>
&lt;ul>
&lt;li>Docker官方提供地中国镜像库：&lt;a href="https://registry.docker-cn.com">https://registry.docker-cn.com&lt;/a>&lt;/li>
&lt;li>七牛云加速器：&lt;a href="https://reg-mirror.qiniu.com">https://reg-mirror.qiniu.com&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>当配置某个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了Docker镜像加速服务，建议根据运行Docker地云平台选择对应地镜像加速服务。&lt;/p>
&lt;p>我们以Docker官方加速器为例进行介绍。&lt;/p></description></item><item><title>raspberry未分类记录</title><link>https://arair.net/p/raspberry/4616ea9d/</link><pubDate>Sun, 07 Feb 2021 20:31:53 +0800</pubDate><guid>https://arair.net/p/raspberry/4616ea9d/</guid><description>&lt;p>Mac通过网线直连控制树莓派&lt;/p></description></item><item><title>raspberry Gpio</title><link>https://arair.net/p/raspberry/8536477c/</link><pubDate>Sun, 07 Feb 2021 20:31:39 +0800</pubDate><guid>https://arair.net/p/raspberry/8536477c/</guid><description>&lt;p>raspberry 2B+ gpio图&lt;/p></description></item><item><title>Windows使用记录</title><link>https://arair.net/p/windows/e64894d1/</link><pubDate>Sun, 07 Feb 2021 20:30:06 +0800</pubDate><guid>https://arair.net/p/windows/e64894d1/</guid><description>&lt;p>windows使用问题及解决方法&lt;/p></description></item><item><title>Padavan路由器安装timeMachine</title><link>https://arair.net/p/other/703ded86/</link><pubDate>Sun, 07 Feb 2021 20:28:34 +0800</pubDate><guid>https://arair.net/p/other/703ded86/</guid><description>&lt;h1 id="准备工作">准备工作&lt;/h1>
&lt;p>刷了padavan软件的路由器一台&lt;/p>
&lt;p>移动硬盘或u盘&lt;/p>
&lt;p>移动硬盘格式化为ext4文件格式&lt;/p>
&lt;p>挂载移动硬盘到路由器&lt;/p>
&lt;p>安装opkg命令和其它设置&lt;/p>
&lt;p>​ ssh进入后台执行&lt;code>opkg.sh&lt;/code>命令，等待执行完成&lt;/p>
&lt;p>​ 修改用户名admin为root&lt;/p></description></item><item><title>macbook使用</title><link>https://arair.net/p/other/95e9e6a8/</link><pubDate>Sun, 07 Feb 2021 20:26:49 +0800</pubDate><guid>https://arair.net/p/other/95e9e6a8/</guid><description>&lt;h2 id="macbook使用">macbook使用&lt;/h2>
&lt;p>安装git等工具&lt;/p>
&lt;pre tabindex="0">&lt;code>xcode-select --install
&lt;/code>&lt;/pre></description></item><item><title>pppoe Server安装</title><link>https://arair.net/p/linux/server/a38a3663/</link><pubDate>Sun, 07 Feb 2021 20:24:04 +0800</pubDate><guid>https://arair.net/p/linux/server/a38a3663/</guid><description>&lt;p>环境：ubuntu 16.04&lt;/p></description></item><item><title>iptables的使用</title><link>https://arair.net/p/linux/command/a2989e85/</link><pubDate>Sun, 07 Feb 2021 20:21:10 +0800</pubDate><guid>https://arair.net/p/linux/command/a2989e85/</guid><description>iptables 流向图 graph LR NETWORK --> prerouting(RPEROUTING) prerouting --raw mangle nat--> route(route) route --> input(INPUT) input --mangle filter--> local(local process) local --> output(OUTPUT) output --raw mangle nat filter--> postrouting(POSTROUTING) route --> forward(forward) forward --mangle filter--> postrouting postrouting --mangle nat--> NETWORK2(NETWORK) netfilter hooks +-----------&amp;gt; local +-----------+ | process | | | | | | | | v MANGLE +-------------+--------+ FILTER | | +----------------------+ RAW SECURITY | input | |</description></item><item><title>利用random与urandom生成随机数</title><link>https://arair.net/p/language/c/linux/cad5c2bd/</link><pubDate>Sun, 07 Feb 2021 20:18:22 +0800</pubDate><guid>https://arair.net/p/language/c/linux/cad5c2bd/</guid><description>&lt;ol>
&lt;li>介绍&lt;br>
&lt;code>/dev/random&lt;/code>和&lt;code>/dev/urandom&lt;/code>是Linux系统中提供的随机伪设备，这两个设备的任务，是提供永不为空的随机字节数据流。很多解密程序与安全应用程序（如SSH Keys,SSL Keys等）需要它们提供的随机数据流。&lt;/li>
&lt;li>区别&lt;br>
这两个设备的差异在于：&lt;code>/dev/random&lt;/code>的random依赖于系统中断，因此在系统的中断数不足时，&lt;code>/dev/random&lt;/code>设备会一直封锁，尝试读取的进程就会进入等待状态，直到系统的中断数充分够用, &lt;code>/dev/random&lt;/code>设备可以保证数据的随机性。&lt;br>
&lt;code>/dev/urandom&lt;/code>不依赖系统的中断，也就不会造成进程忙等待，但是数据的随机性也不高。&lt;/li>
&lt;li>使用方式&lt;br>
字符设备文件的打开方式和其它文件一样，都是使用open函数打开设备，然后从文件描述符中获取数据即可。&lt;/li>
&lt;/ol></description></item><item><title>内核文件相关记录</title><link>https://arair.net/p/linux/kernel/cc275769/</link><pubDate>Sun, 07 Feb 2021 20:16:17 +0800</pubDate><guid>https://arair.net/p/linux/kernel/cc275769/</guid><description>&lt;p>内核文件相关记录&lt;/p></description></item><item><title>awk命令</title><link>https://arair.net/p/cc2c785cb42a4bb897c5cfd8b594b8c4/</link><pubDate>Sun, 07 Feb 2021 20:04:33 +0800</pubDate><guid>https://arair.net/p/cc2c785cb42a4bb897c5cfd8b594b8c4/</guid><description>awk是一种编程语言，用于在linux/unix下对文本和数据进行处理。数据可以来自标准输入（stdin）、一个或多个文件，或其它命令的输出</description></item><item><title>linux c常用结构体</title><link>https://arair.net/p/language/c/linux/d6fe710c/</link><pubDate>Thu, 04 Feb 2021 10:03:37 +0800</pubDate><guid>https://arair.net/p/language/c/linux/d6fe710c/</guid><description>&lt;p>常用结构体&lt;/p></description></item><item><title>linux进程间通信--套接字 tcp</title><link>https://arair.net/p/language/c/linux/df98c918/</link><pubDate>Thu, 04 Feb 2021 10:00:53 +0800</pubDate><guid>https://arair.net/p/language/c/linux/df98c918/</guid><description>&lt;p>linux下tcp函数实现示例&lt;/p>
&lt;p>包含ipv4与ipv6&lt;/p></description></item><item><title>Linux命令记录</title><link>https://arair.net/p/linux/command/f7ac531c/</link><pubDate>Thu, 04 Feb 2021 09:58:12 +0800</pubDate><guid>https://arair.net/p/linux/command/f7ac531c/</guid><description>&lt;h1 id="grep">grep&lt;/h1>
&lt;p>Linux 命令大全 Linux 命令大全&lt;/p></description></item><item><title>Linux平台C语言记录</title><link>https://arair.net/p/language/c/6fa4517a/</link><pubDate>Thu, 04 Feb 2021 09:54:58 +0800</pubDate><guid>https://arair.net/p/language/c/6fa4517a/</guid><description>&lt;p>用于记录linux平台下c语言的学习记录&lt;/p></description></item><item><title>getifaddrs函数的用法</title><link>https://arair.net/p/language/c/f394b890/</link><pubDate>Thu, 04 Feb 2021 09:48:20 +0800</pubDate><guid>https://arair.net/p/language/c/f394b890/</guid><description>&lt;p>getifaddrs&lt;/p>
&lt;p>获取linux ip地址方法，可以获取相应接口的ipv4和ipv6地址&lt;/p></description></item><item><title>tcpdump</title><link>https://arair.net/p/tool/1cfe4a01/</link><pubDate>Wed, 03 Feb 2021 16:43:03 +0800</pubDate><guid>https://arair.net/p/tool/1cfe4a01/</guid><description>&lt;p>tcpdump能够分析网络行为，性能和应用产生或接收网络流量。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息，从而使用户能够进一步找出问题的根源。&lt;/p>
&lt;p>也可以使用 tcpdump 的实现特定目的，例如在路由器和网关之间拦截并显示其他用户或计算机通信。通过cpdump分析非加密的流量，如Telnet或HTTP的数据包，查看登录的用户名、密码、网址、正在浏览的网站内容，或任何其他信息。因此系统中存在网络分析工具主要不是对本机安全的威胁，而是对网络上的其他计算机的安全存在威胁。&lt;/p>
&lt;p>有很多用户喜欢使用柏克莱数据包过滤器来限制 tcpdump 产生的数据包数量，这样BPF会只把“感兴趣”的数据包到上层软件，可以避免从操作系统内核向用户态复制其他数据包，降低抓包的CPU的负担以及所需的缓冲区空间，从而减少丢包率。&lt;/p></description></item><item><title>gcc说明</title><link>https://arair.net/p/9fe45fbf4bd04bbea1ab9dc245c2b9b3/</link><pubDate>Tue, 02 Feb 2021 10:57:17 +0800</pubDate><guid>https://arair.net/p/9fe45fbf4bd04bbea1ab9dc245c2b9b3/</guid><description>GCC（GNU Compiler Collection，GNU编译器套件）是由GNU开发的编程语言译器。GNU编译器套件包括C、C++、 Objective-C</description></item><item><title>内核锁相关函数</title><link>https://arair.net/p/linux/kernel/f34ed81a/</link><pubDate>Mon, 01 Feb 2021 21:47:48 +0800</pubDate><guid>https://arair.net/p/linux/kernel/f34ed81a/</guid><description>互斥锁 1 2 3 mutex_init(struct mutex *lock); mutex_lock(struct mutex *lock); mutex_unlock(struct mutex *lock); 自旋锁 1 2 spin_lock(spinlock_t *lock); spin_unlock(spinlock_t *lock);</description></item><item><title>qemu运行编译的linux内核</title><link>https://arair.net/p/linux/kernel/f947eaf8/</link><pubDate>Mon, 01 Feb 2021 21:44:31 +0800</pubDate><guid>https://arair.net/p/linux/kernel/f947eaf8/</guid><description>&lt;p>使用qemu模拟arm环境运行编译好的内核&lt;/p></description></item><item><title>Python3</title><link>https://arair.net/p/language/d96ac242/</link><pubDate>Mon, 01 Feb 2021 21:39:14 +0800</pubDate><guid>https://arair.net/p/language/d96ac242/</guid><description>&lt;p>整形转字符串&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-python" data-lang="python">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">str&lt;/span>(&lt;span style="color:#8be9fd;font-style:italic">int&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>linux内核驱动初始化相关</title><link>https://arair.net/p/linux/kernel/58d80afe/</link><pubDate>Mon, 01 Feb 2021 21:30:59 +0800</pubDate><guid>https://arair.net/p/linux/kernel/58d80afe/</guid><description>&lt;p>驱动初始化函数&lt;/p></description></item><item><title>Vmware</title><link>https://arair.net/p/tool/bf7189dd/</link><pubDate>Mon, 01 Feb 2021 14:16:37 +0800</pubDate><guid>https://arair.net/p/tool/bf7189dd/</guid><description>&lt;p>vmware&lt;/p>
&lt;p>一个虚拟机软件&lt;/p></description></item><item><title>Genieacs的搭建及使用方法</title><link>https://arair.net/p/317f96143d6049f789422c24cea427c3/</link><pubDate>Mon, 01 Feb 2021 14:11:43 +0800</pubDate><guid>https://arair.net/p/317f96143d6049f789422c24cea427c3/</guid><description>genieacs是用于tr069 服务器 acs url: http://ip:7547/genieacs 管理界面: http://ip:3000 默认登录用户名密码: admin:amdin 环境搭建 https://github.com/genieacs/genieacs/wiki/Installation-Guide-Ubuntu-16.04 系统要求: ubuntu 16.04 脚本备份，来源于上面的链接 1 2 3 4 5 6</description></item><item><title>shell使用方法</title><link>https://arair.net/p/084b09cd46ce4630b2228863d263396b/</link><pubDate>Mon, 01 Feb 2021 14:07:09 +0800</pubDate><guid>https://arair.net/p/084b09cd46ce4630b2228863d263396b/</guid><description>调试方法 -x 进入跟踪方式，显示所执行的每一条命令 脚本参数的获取 $0 当前脚本的文件名 $n 传递给脚本或函数的参数。n 是一个数字，表示第几个参数。例如，</description></item><item><title>Iperf使用方法与参数说明</title><link>https://arair.net/p/tool/462ee551/</link><pubDate>Sun, 31 Jan 2021 19:43:34 +0800</pubDate><guid>https://arair.net/p/tool/462ee551/</guid><description>&lt;p>&lt;a href="https://iperf.fr/">https://iperf.fr/&lt;/a>&lt;/p>
&lt;p>iperf是一个网络性能测试工具。可以测试TCP和UDP带宽质量，可以测量最大TCP带宽，具有多种参数和UDP特性，可以报告带宽，延迟抖动和数据包丢失。Iperf在linux和windows平台均有二进制版本供自由使用。&lt;/p>
&lt;p>iperf was developed by NLANRDAST as a modern alternative for measuring maximum TCP and UDP bandwidth performance. Iperf allows the tuning of various parameters and UDP characteristics. Iperf reports bandwidth, delay jitter, datagram loss.&lt;/p></description></item><item><title>linux watch命令</title><link>https://arair.net/p/linux/command/d430e865/</link><pubDate>Sun, 31 Jan 2021 19:34:24 +0800</pubDate><guid>https://arair.net/p/linux/command/d430e865/</guid><description>&lt;p>watch可以帮你监测一个命令的运行结果，来监测你想要的一切命令的结果变化&lt;/p></description></item><item><title>Security</title><link>https://arair.net/p/gcc/f68bca17/</link><pubDate>Sun, 31 Jan 2021 17:46:10 +0800</pubDate><guid>https://arair.net/p/gcc/f68bca17/</guid><description>&lt;p>环境&lt;/p>
&lt;pre tabindex="0">&lt;code>debian: 10
gcc: 8.3.0
&lt;/code>&lt;/pre>&lt;h2 id="技术简介">技术简介&lt;/h2>
&lt;p>Linux 中有各种各样的安全防护，其中 ASLR 是由内核直接提供的，通过系统配置文件控制。NX，Canary，PIE，RELRO 等需要在编译时根据各项参数开启或关闭。未指定参数时，使用默认设置。&lt;/p></description></item><item><title>Mysql</title><link>https://arair.net/p/35bdd9a3408d4b559724805de5c81d48/</link><pubDate>Sun, 31 Jan 2021 17:24:19 +0800</pubDate><guid>https://arair.net/p/35bdd9a3408d4b559724805de5c81d48/</guid><description>用于记录sql语句等信息 查看MYSQL数据库中所有用户 1 mysql&amp;gt; SELECT DISTINCT CONCAT(&amp;#39;User: &amp;#39;&amp;#39;&amp;#39;,user,&amp;#39;&amp;#39;&amp;#39;@&amp;#39;&amp;#39;&amp;#39;,host,&amp;#39;&amp;#39;&amp;#39;;&amp;#39;) AS query FROM mysql.user; 查看数据库中具体某个用户的权限 1 2 mysql&amp;gt; show grants for &amp;#39;cactiuser&amp;#39;@&amp;#39;%&amp;#39;; mysql&amp;gt; select * from mysql.user where user=&amp;#39;cactiuser&amp;#39; \G 查看u</description></item><item><title>inittab文件详解</title><link>https://arair.net/p/linux/4c7c2a48/</link><pubDate>Sun, 31 Jan 2021 17:06:19 +0800</pubDate><guid>https://arair.net/p/linux/4c7c2a48/</guid><description>&lt;p>记录老系统，最新版本可能已经不适用。&lt;/p>
&lt;p>linux在完成内核内引导（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式来启动其他用户级的进程或服务。所以，init始终是第一个进程，其PID始终为1（ps -aux | less），它是系统所有进程的父进程。&lt;/p></description></item><item><title>Debian</title><link>https://arair.net/p/linux/5cd12c61/</link><pubDate>Sat, 30 Jan 2021 23:05:53 +0800</pubDate><guid>https://arair.net/p/linux/5cd12c61/</guid><description>debian 10 默认最小安装没有man命令，需要安装man-db sudo apt install man-db</description></item><item><title>echo命令</title><link>https://arair.net/p/linux/command/0c93ab30d84d42478aeead8011fd6ecb/</link><pubDate>Thu, 28 Jan 2021 17:17:28 +0800</pubDate><guid>https://arair.net/p/linux/command/0c93ab30d84d42478aeead8011fd6ecb/</guid><description>参数 -n: 不自动换行 -e: 输出转义字符 常见转义字符 \b 转义后相当于按退格键（backspace） ,但前提是”\b”后面存在字符，具体效果参考下方示例。</description></item><item><title>ping命令</title><link>https://arair.net/p/tool/4d462862/</link><pubDate>Mon, 25 Jan 2021 14:58:01 +0800</pubDate><guid>https://arair.net/p/tool/4d462862/</guid><description>当前使用linux下ping为例 -I 指定接口 -i interval 发送数据包之间等待的间隔(单位秒)。默认设置是等待一秒 -c count 发送count次ECHO_REQUE</description></item><item><title>sublime使用记录</title><link>https://arair.net/p/tool/ee5ba116/</link><pubDate>Sun, 24 Jan 2021 20:21:48 +0800</pubDate><guid>https://arair.net/p/tool/ee5ba116/</guid><description>&lt;p>使用 sublime记录&lt;/p></description></item><item><title>strstr函数</title><link>https://arair.net/p/language/c/function/ddd81d9f/</link><pubDate>Sun, 24 Jan 2021 19:03:53 +0800</pubDate><guid>https://arair.net/p/language/c/function/ddd81d9f/</guid><description>&lt;h1 id="描述">描述&lt;/h1>
&lt;p>C 库函数 **char *strstr(const char *haystack, const char *needle)**在字符串 haystack 中查找第一次出现字符串 needle 的位置，不包含终止符 &amp;lsquo;\0&amp;rsquo;。&lt;/p></description></item><item><title>cron服务使用</title><link>https://arair.net/p/linux/command/3ce8a8fe/</link><pubDate>Sun, 24 Jan 2021 11:50:41 +0800</pubDate><guid>https://arair.net/p/linux/command/3ce8a8fe/</guid><description>&lt;p>cron服务是一个定时执行的服务，守护进程为&lt;code>crond&lt;/code>可以通过crontab 命令添加或者编辑需要定时执行的任务：&lt;/p>
&lt;ul>
&lt;li>crontab -u //设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数&lt;/li>
&lt;li>crontab -l //列出某个用户cron服务的详细内容&lt;/li>
&lt;li>crontab -r //删除某个用户的cron服务&lt;/li>
&lt;li>crontab -e //编辑某个用户的cron服务&lt;/li>
&lt;/ul></description></item><item><title>Kernel_panic</title><link>https://arair.net/p/linux/kernel/648acfa6/</link><pubDate>Sun, 24 Jan 2021 11:49:21 +0800</pubDate><guid>https://arair.net/p/linux/kernel/648acfa6/</guid><description>&lt;p>需要打开以下项，保证有足够的调试信息&lt;/p>
&lt;pre tabindex="0">&lt;code>CONFIG_DEBUG_KERNEL=y
CONFIG_DEBUG_INFO=y
CONFIG_KALLSYMS=y
CONFIG_KALLSYMS_ALL=y
CONFIG_DEBUG_BUGVERBOSE=y
CONFIG_STACKTRACE=y
&lt;/code>&lt;/pre></description></item><item><title>内核计时器代码例子</title><link>https://arair.net/p/linux/kernel/fbff8079/</link><pubDate>Sun, 24 Jan 2021 11:47:57 +0800</pubDate><guid>https://arair.net/p/linux/kernel/fbff8079/</guid><description>&lt;p>Makefile编写&lt;/p>
&lt;div class="highlight">&lt;div style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">
&lt;table style="border-spacing:0;padding:0;margin:0;border:0;">&lt;tr>&lt;td style="vertical-align:top;padding:0;margin:0;border:0;">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 1
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 2
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 3
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 4
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 5
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 6
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 7
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 8
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f"> 9
&lt;/span>&lt;span style="white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td style="vertical-align:top;padding:0;margin:0;border:0;;width:100%">
&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-makefile" data-lang="makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">obj-m&lt;/span>&lt;span style="color:#ff79c6">+=&lt;/span>timer_test.o
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">#SRC=&amp;#34;/lib/modules/$(shell uname -r)/build/&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6272a4">&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">CROSS_COMPILE&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;/home/bmduser10/develop/realtek/R810/rtl819x/toolchain/msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827/bin/mips-linux&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#8be9fd;font-style:italic">SRC&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#f1fa8c">&amp;#34;/home/bmduser10/develop/realtek/R810/rtl819x/linux-3.10&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">all&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make -C &lt;span style="color:#ff79c6">$(&lt;/span>SRC&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">M&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>PWD&lt;span style="color:#ff79c6">)&lt;/span> modules
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#50fa7b">clean&lt;/span>&lt;span style="color:#ff79c6">:&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> make -C &lt;span style="color:#ff79c6">$(&lt;/span>SRC&lt;span style="color:#ff79c6">)&lt;/span> &lt;span style="color:#8be9fd;font-style:italic">M&lt;/span>&lt;span style="color:#ff79c6">=&lt;/span>&lt;span style="color:#ff79c6">$(&lt;/span>PWD&lt;span style="color:#ff79c6">)&lt;/span> clean
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>module代码示例</title><link>https://arair.net/p/linux/kernel/ad9a609f/</link><pubDate>Sun, 24 Jan 2021 11:46:59 +0800</pubDate><guid>https://arair.net/p/linux/kernel/ad9a609f/</guid><description>Makefile编写 1 2 3 4 5 6 7 8 9 10 obj-m+=timer_test.o #SRC=&amp;#34;/lib/modules/$(shell uname -r)/build/&amp;#34; CROSS_COMPILE=&amp;#34;/home/bmduser10/develop/realtek/R810/rtl819x/toolchain/msdk-4.4.7-mips-EL-3.10-u0.9.33-m32t-140827/bin/mips-linux&amp;#34; SRC=&amp;#34;/home/bmduser10/develop/realtek/R810/rtl819x/linux-3.10&amp;#34; all: make -C $(SRC) M=$(PWD) modules clean: make -C $(SRC) M=$(PWD) clean 示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include &amp;lt;linux/module.h&amp;gt; #include &amp;lt;linux/kernel.h&amp;gt; #include &amp;lt;linux/init.h&amp;gt; static int __init hello_init</description></item><item><title>内核通知连</title><link>https://arair.net/p/linux/kernel/da8dee5b/</link><pubDate>Sun, 24 Jan 2021 11:45:56 +0800</pubDate><guid>https://arair.net/p/linux/kernel/da8dee5b/</guid><description>定义链 用于通知信息的处理函数，包括要调用的回调函数 1 2 3 4 5 6 7 8 9 10 11 // include\linux\notifier.h struct notifier_block; typedef int (*notifier_fn_t)(struct notifier_block *nb, unsigned long action, void *data); struct notifier_block { notifier_fn_t notifier_call; struct notifier_block __rcu *next; int priority; }; notifier_call 要执行的函数 next</description></item><item><title>内核初始化</title><link>https://arair.net/p/linux/kernel/8f0aad57/</link><pubDate>Sun, 24 Jan 2021 11:45:03 +0800</pubDate><guid>https://arair.net/p/linux/kernel/8f0aad57/</guid><description>&lt;h1 id="引导期间的内核选项">引导期间的内核选项&lt;/h1>
&lt;p>linux允许用户把内核配置选项传给引导记录，然后引导记录再把选项传给内核。&lt;/p>
&lt;p>parse_args函数用于解析输入字符串，输入的字符串内是一些参数，其形式为&lt;code>变量名称=值&lt;/code>，寻找关键字，并开启适当的处理函数。加载模块时，也会用到parse_args，借以解析命令列参数。&lt;/p>
&lt;p>函数位置&lt;code>kernel/params.c&lt;/code>&lt;/p></description></item><item><title>内核函数相关</title><link>https://arair.net/p/linux/kernel/0e4abf8d/</link><pubDate>Sun, 24 Jan 2021 11:43:53 +0800</pubDate><guid>https://arair.net/p/linux/kernel/0e4abf8d/</guid><description>功能 如 i386 ，在区别 I/O 空间和内存空间的进程的 I/O 空间写入数据。 outb() I/O 上写入 8 位数据 ( 1 字节 )； outw() I/O 上写入 16 位数据 ( 2 字节 )； outl () I/O 上写入 32 位数据 ( 4</description></item><item><title>proc文件子系统</title><link>https://arair.net/p/linux/kernel/8e8153f8/</link><pubDate>Sun, 24 Jan 2021 11:25:18 +0800</pubDate><guid>https://arair.net/p/linux/kernel/8e8153f8/</guid><description>&lt;p>proc_create使用方法&lt;/p></description></item><item><title>网络子系统初始化</title><link>https://arair.net/p/linux/kernel/2b2cc5f7/</link><pubDate>Sun, 24 Jan 2021 11:24:01 +0800</pubDate><guid>https://arair.net/p/linux/kernel/2b2cc5f7/</guid><description>&lt;h1 id="网络设备初始化">网络设备初始化&lt;/h1>
&lt;p>内核初始化代码(init/main.c &amp;ndash;&amp;gt; asmlinkage __visible void __init start_kernel(void))&lt;/p>
&lt;blockquote>
&lt;p>ps：这里只介绍网络子系统的初始化流程。&lt;/p>
&lt;/blockquote>
&lt;p>系统启动时会执行start_kernel对内核的各个子系统进行初始化。start_kernel会进行必要的初始化任务，比如init_IRQ和softirq_init进行硬中断和软中断初始化,在rest_init中会调用内核线程函数创建一个线程执行kernel_init继续进行其它初始化，start_kernel函数将会继续执行下去并退出。在kernel_init函数中的执行关系kernel_init_freeable()&amp;ndash;&amp;gt;do_basic_setup()&amp;ndash;&amp;gt;do_initcalls()，在do_initcalls函数中，会对调用各个子系统的初始化函数，类似subsys_initcall(net_dev_init)函数。其中net_dev_init&lt;code>net/core/dev.c&lt;/code>为网络设备的初始化函数&lt;/p>
&lt;p>内核子系统和编译到内核的驱动都是通过do_initcalls进行初始化的&lt;/p></description></item><item><title>Makefile使用记录</title><link>https://arair.net/p/tool/ddeb0201/</link><pubDate>Sun, 24 Jan 2021 11:15:04 +0800</pubDate><guid>https://arair.net/p/tool/ddeb0201/</guid><description>= 是最基本的赋值 := 是覆盖之前的值 ?= 是如果没有被赋值过就赋予等号后面的值 += 是添加等号后面的值 $(MAKELEVEL) makefile的内置变量，用于查看当前make</description></item><item><title>gcc使用问题及解决方法</title><link>https://arair.net/p/f609f22c1c814e96bacdad6a541352ab/</link><pubDate>Sat, 23 Jan 2021 20:09:44 +0800</pubDate><guid>https://arair.net/p/f609f22c1c814e96bacdad6a541352ab/</guid><description>C++11 error: unable to find string literal operator &amp;lsquo;operator&amp;quot; 一个简单的宏 1 #define LOG_INFORMATION(x, ...) LOG_ME(&amp;#34;%s:%d, &amp;#34;x, __FUNCTION__,__LINE__, ##__VA_ARGS__) 一直都可以正常编译，但是当启用C++11的时候，报告编译错误 C++ 11 Complier ErrorShell 1 error: unable to find string literal operator &amp;#39;operator&amp;#34;&amp;#34;x&amp;#39; 网上搜了</description></item><item><title>css的学习记录</title><link>https://arair.net/p/web/8a7e999f2c2c41df87eae195443783b4/</link><pubDate>Fri, 22 Jan 2021 16:52:07 +0800</pubDate><guid>https://arair.net/p/web/8a7e999f2c2c41df87eae195443783b4/</guid><description>修改鼠标经过所有链接时的样式 添加下划线 css hover 1 2 3 a:hover{ border-bottom: 1px solid; } any-link :any-link CSS 伪类 选择器代表一个有链接锚点的元素，而不管它是否被访问过，也就是说，它会匹配</description></item><item><title>git的使用记录</title><link>https://arair.net/p/31d5a06321a7456a80e33b23b3fd8f8b/</link><pubDate>Thu, 21 Jan 2021 10:39:15 +0800</pubDate><guid>https://arair.net/p/31d5a06321a7456a80e33b23b3fd8f8b/</guid><description>记录git的使用方法 git log 查看每次提交的diff git log -p filename 查看filename相关的commit记录 git log filename 查看某个人的提交记录 git log author=&amp;#34;username&amp;#34; filename 查看变更文</description></item><item><title>让socket端口不被子进程继承</title><link>https://arair.net/p/language/c/be1ae228/</link><pubDate>Wed, 20 Jan 2021 14:01:25 +0800</pubDate><guid>https://arair.net/p/language/c/be1ae228/</guid><description>&lt;p>有两个程序A,B&lt;/p></description></item><item><title>Create Hugo Site</title><link>https://arair.net/p/a31866b3/</link><pubDate>Wed, 20 Jan 2021 10:48:02 +0800</pubDate><guid>https://arair.net/p/a31866b3/</guid><description>&lt;p>记录站点建立方法&lt;/p>
&lt;p>环境：&lt;a href="https://gohugo.io">hugo&lt;/a>+&lt;a href="https://github.com">github&lt;/a>+&lt;a href="https://vercel.com">vercel&lt;/a>&lt;/p></description></item></channel></rss>